<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老蔡博客</title>
  
  <subtitle>老蔡的总结和思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.oldcai.com/"/>
  <updated>2020-10-17T06:53:00.262Z</updated>
  <id>https://www.oldcai.com/</id>
  
  <author>
    <name>oldcai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>赌川普赢，赔率接近3倍</title>
    <link href="https://www.oldcai.com/politics/trump-win-token/"/>
    <id>https://www.oldcai.com/politics/trump-win-token/</id>
    <published>2020-10-16T04:42:44.000Z</published>
    <updated>2020-10-17T06:53:00.262Z</updated>
    
    <content type="html"><![CDATA[<p>按我个人对政治肤浅的见解，川普这次连任应该概率是很大的。</p><p>在和一些小朋友探讨后，他们怂恿我去买一个基于加密货币的金融衍生品，一个叫做TRUMPWIN的token。看了一下，赔率是1/0.361=2.77的样子</p><p><a href="https://support.poloniex.com/hc/en-us/articles/360052070213-TRUMPWIN-TRUMPLOSE-Are-Now-on-Poloniex" target="_blank" rel="noopener">点这里看TRUMPWIN token介绍</a></p><p><a href="https://poloniex.com/exchange/USDT_TRUMPWIN" target="_blank" rel="noopener">点这里进交易页面</a></p><p>其实在传统博彩网站上，早就有类似的盘口。</p><p>参考<a href="https://www.oddschecker.com/politics/us-politics/us-presidential-election-2020/winner" target="_blank" rel="noopener">oddschecker</a>上的押注情况，川普目前赔率在2.88，拜登在1.4</p><h2 id="这就很有趣了"><a href="#这就很有趣了" class="headerlink" title="这就很有趣了"></a>这就很有趣了</h2><p>即使川普拜登两边胜率在50%：50%</p><p>按凯利公式计算，投注比例32.01%，也有13.35%收益率。</p><p>而到大选还只有不到一个月了，这样的收益期望相当可观。</p><p>当然，选举结果这种东西有高不确定性，小赌怡情就好。</p><h2 id="更远一点的思考"><a href="#更远一点的思考" class="headerlink" title="更远一点的思考"></a>更远一点的思考</h2><p>这个偏差是什么原因导致的？</p><p>因为我所掌握的信息是被扭曲的（实际上川普没那么大胜算，甚至快输了）？</p><p>还是投注的人来自的社会圈子有共性（都是不支持川普的人）？</p><p>或者是媒体在一次次民调中的预测所起到的影响导致的？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按我个人对政治肤浅的见解，川普这次连任应该概率是很大的。&lt;/p&gt;
&lt;p&gt;在和一些小朋友探讨后，他们怂恿我去买一个基于加密货币的金融衍生品，一个叫做TRUMPWIN的token。看了一下，赔率是1/0.361=2.77的样子&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s
      
    
    </summary>
    
      <category term="赌博" scheme="https://www.oldcai.com/categories/%E8%B5%8C%E5%8D%9A/"/>
    
    
      <category term="token" scheme="https://www.oldcai.com/tags/token/"/>
    
      <category term="Trump" scheme="https://www.oldcai.com/tags/Trump/"/>
    
  </entry>
  
  <entry>
    <title>计划台积电中长期持有，聊聊最浅显的买入逻辑</title>
    <link href="https://www.oldcai.com/investing/tsm-2020-10-16/"/>
    <id>https://www.oldcai.com/investing/tsm-2020-10-16/</id>
    <published>2020-10-16T04:13:51.000Z</published>
    <updated>2020-10-16T04:27:20.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h2><p>因为今年订立的目标是，由短线转为长线交易，但这次对台积电（TSM）在短期内的操作，并不是出于短线考虑，所以值得记录一下。</p><p>前几天因为感觉到大盘会调整，所以减了很多股票的仓位，台积电也是其中之一，不过不是减仓而是清仓。</p><p>之前的思考是，台积电这种重资产的企业，受产能制约很难飞速发展。近几年的销售收入增幅只有3%，5%，4%，比起手上其他的如NET，BILI这样动辄50%增长的小妖精，真的是太不性感了。</p><p>这几天虽然如预期一样有调整，但是没看出恐慌情绪，对后市的预期变好，所以想补一些仓位，考虑再三，还是选择了台积电（TSM）。</p><p>补加回来了一些，目前占5%仓位，计划持有至少3个月。</p><h2 id="格局"><a href="#格局" class="headerlink" title="格局"></a>格局</h2><p>现在的芯片产业格局，台积电处于高端芯片不可替代的上游产业。</p><p>从断供华为后麒麟就飞不起来了这件事情上，就可以看出，台积电把控着芯片产业的命脉，就像当年的锂矿把握锂电命脉一样。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在英特尔（INTC）重新扳回5nm制程这一局之前，其他芯片厂商，如AMD和改换ARM芯片的苹果想抢夺这个窗口期来抢夺芯片市场，就必须在台积电争夺产能。</p><p>而5nm制程芯片本来在移动ARM芯片领域中就因为节能和高性能就炙手可热了，而如今更是因为PC端芯片厂的加入而更加紧缺。</p><p>而通过什么来争夺资源呢？在有效市场中，是靠价格。</p><p>这个趋势反映到公司运营数据上，就是巨幅增加台积电下几个财报周期的盈利。</p><p>这也是台积电到目前为止已经翻倍的内在原因之一。</p><p>不过仍需注意的是，市场其实知道台积电的产能不足，也已经反映了对芯片代工的价格上涨的预期，否则营收个位数的增长不可能支撑3月到现在翻倍的涨幅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作记录&quot;&gt;&lt;a href=&quot;#操作记录&quot; class=&quot;headerlink&quot; title=&quot;操作记录&quot;&gt;&lt;/a&gt;操作记录&lt;/h2&gt;&lt;p&gt;因为今年订立的目标是，由短线转为长线交易，但这次对台积电（TSM）在短期内的操作，并不是出于短线考虑，所以值得记录一下。&lt;/
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
      <category term="美股" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/%E7%BE%8E%E8%82%A1/"/>
    
    
      <category term="台积电" scheme="https://www.oldcai.com/tags/%E5%8F%B0%E7%A7%AF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>一笔美元转账记录，手续费、额度、耗时</title>
    <link href="https://www.oldcai.com/investing/dollor-transfer/"/>
    <id>https://www.oldcai.com/investing/dollor-transfer/</id>
    <published>2020-09-01T01:48:59.000Z</published>
    <updated>2020-09-01T07:12:32.994Z</updated>
    
    <content type="html"><![CDATA[<p>外汇管制越来越严了。老蔡今天汇款的时候，碰到上次汇款时还没有出现过的单日额度限制，所以想记录一下。</p><p>除了换汇额度一年50000美金外，这次被银行告知单日汇款额度也被限制在人民币50000以下，不知道是不是只是银行单方面的限制。于是，汇了7200美金（折算人民币约50000）。</p><p>由于办理的光大银行出国加卡，免了电报费，所以发汇行只收了千分之一手续费，约50人民币。</p><p>汇出时间是早上9点，实际到账时间是上午10点。</p><p>中转行手续费46美元，加上香港招商银行收款手续费4美元，总共50美元。</p><p>总结一下，此笔交易手续费约0.8%。但如果转账金额更小、存在电报费的情况下可能更高，会超过1%，有其他更低费率的途径可以考虑其他途径转账。</p><p>后记：第二天收到电话，说让我改购汇用途。说总行收紧政策了，因私旅游得有机票或者酒店预订记录，有签证都不行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外汇管制越来越严了。老蔡今天汇款的时候，碰到上次汇款时还没有出现过的单日额度限制，所以想记录一下。&lt;/p&gt;
&lt;p&gt;除了换汇额度一年50000美金外，这次被银行告知单日汇款额度也被限制在人民币50000以下，不知道是不是只是银行单方面的限制。于是，汇了7200美金（折算人民币
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="转账" scheme="https://www.oldcai.com/tags/%E8%BD%AC%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>同一GitHub账号GitHub Pages绑定多个域名操作步骤</title>
    <link href="https://www.oldcai.com/hexo/github-pages/"/>
    <id>https://www.oldcai.com/hexo/github-pages/</id>
    <published>2020-08-26T10:48:00.000Z</published>
    <updated>2020-08-26T10:49:03.771Z</updated>
    
    <content type="html"><![CDATA[<p>国内的互联网偏向保守，像GitHub这么慷慨的举动确实不多，以至于老蔡刚开始也以为GitHub只能绑定一个域名，建一个网站。</p><p>但是，实际上GitHub Pages是支持绑定多个域名的，不过在他们的服务条款中禁止滥用，也就是说只要不是容易引发争议、违反美国法律的内容，应该都是没有问题的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>长话短说，建立多个网站其实就是建立多个repository，并打开网站功能</p><p>短话长说，分为2步</p><p>注：图片使用imgur存放，看不到请搬梯子</p><p>下面是小白操作步骤，详细到哭</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li>本地装好git命令</li><li>有一个可以登陆的GitHub账号</li></ol><h3 id="第一步，建立repo"><a href="#第一步，建立repo" class="headerlink" title="第一步，建立repo"></a>第一步，建立repo</h3><h4 id="1-1-新建"><a href="#1-1-新建" class="headerlink" title="1.1 新建"></a>1.1 新建</h4><p><img src="https://i.imgur.com/EGRwXZB.jpg" alt="2020-08-26 at 3.49 pm"><br>右上角，点New repository</p><h4 id="1-2-给项目取名"><a href="#1-2-给项目取名" class="headerlink" title="1.2 给项目取名"></a>1.2 给项目取名</h4><p><img src="https://i.imgur.com/pwt8cXC.jpg" alt="2020-08-26 at 5.13 pm"></p><p>因为每个项目名需要保证唯一性，而担心创建的网站太多，名字弄混，老蔡就干脆把repository name写成想绑定的网站域名了。</p><p>这一步不影响最终的域名绑定，只是GitHub代码仓库的地址。</p><p>填好后点最下面的Create repository，创建代码仓库。<br>此时会自动跳转到下一个GitHub页面，先不要任何操作（不要刷新、关闭网页）<br>打开控制台，继续下面的操作</p><h3 id="第二步，创建本地网页目录"><a href="#第二步，创建本地网页目录" class="headerlink" title="第二步，创建本地网页目录"></a>第二步，创建本地网页目录</h3><p>在控制台中，cd到准备用作本地网页目录的路径。</p><h4 id="2-1-创建域名解析配置文件"><a href="#2-1-创建域名解析配置文件" class="headerlink" title="2.1 创建域名解析配置文件"></a>2.1 创建域名解析配置文件</h4> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"githubpages.maintainless.com"</span> <span class="meta">&gt;&gt; </span>CNAME</span><br></pre></td></tr></table></figure><p> 如果你用的是其他域名，要记得改成自己的。</p><h4 id="2-2-创建git项目"><a href="#2-2-创建git项目" class="headerlink" title="2.2 创建git项目"></a>2.2 创建git项目</h4><p>复制下面的命令，在命令行中运行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"Hello world"</span> &gt;&gt; index.html</span><br><span class="line">git init</span><br><span class="line">git add index.html</span><br><span class="line">git add index.html</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure><h4 id="2-3-关联刚才创建的GitHub-repo"><a href="#2-3-关联刚才创建的GitHub-repo" class="headerlink" title="2.3 关联刚才创建的GitHub repo"></a>2.3 关联刚才创建的GitHub repo</h4><p>从刚才的GitHub页面中，复制下面的命令<br><img src="https://i.imgur.com/JedJClJ.jpg" alt="2020-08-26 at 5.22 pm"></p><p>在刚才的命令行中运行</p><h3 id="第三步，打开GitHub网页功能"><a href="#第三步，打开GitHub网页功能" class="headerlink" title="第三步，打开GitHub网页功能"></a>第三步，打开GitHub网页功能</h3><p>没有打开GitHub网页功能之前，GitHub是不会自动关联网页到域名的，这需要注意。</p><p>刷新刚才复制命令的网页，如果内容已经变了，就说明以上步骤是成功的。</p><h4 id="3-1-进入设置"><a href="#3-1-进入设置" class="headerlink" title="3.1 进入设置"></a>3.1 进入设置</h4><p><img src="https://i.imgur.com/jHAEviD.jpg" alt="2020-08-26 at 6.23 pm"></p><p>然后点击Settings，进行设置</p><h4 id="3-2-选择分支"><a href="#3-2-选择分支" class="headerlink" title="3.2 选择分支"></a>3.2 选择分支</h4><p><img src="https://i.imgur.com/1VFWDBl.jpg" alt="2020-08-26 at 6.21 pm"></p><p>选择分支后点Save<br><img src="https://i.imgur.com/ARW5pQR.jpg" alt="2020-08-26 at 6.28 pm"></p><p>就打开了GitHub网页功能</p><p><img src="https://i.imgur.com/CdS892U.jpg" alt="2020-08-26 at 6.37 pm"></p><p>记住这个地址，下面解析需要用到。如果GitHub改版，可以尝试 {<strong>GitHub用户名</strong>}.github.io</p><h3 id="第四步，解析域名"><a href="#第四步，解析域名" class="headerlink" title="第四步，解析域名"></a>第四步，解析域名</h3><p>通常来说，解析域名只用在dns服务器中解析即可。</p><p>但是如果需要加速/防墙，建议使用CloudFlare。</p><p><img src="https://i.imgur.com/LlksDfq.jpg" alt="2020-08-26 at 6.40 pm"></p><p><img src="https://i.imgur.com/ZFdsCL1.jpg" alt="2020-08-26 at 6.40 pm"></p><p>在域名解析中，用CNAME解析方式，解析到刚才的记住的地址中的域名部分即可</p><h3 id="第五步，打开网页查看"><a href="#第五步，打开网页查看" class="headerlink" title="第五步，打开网页查看"></a>第五步，打开网页查看</h3><p>打开<a href="https://githubpages.maintainless.com/" target="_blank" rel="noopener">测试地址</a>查看</p><p><img src="https://i.imgur.com/fJSwZKM.jpg" alt="2020-08-26 at 6.42 pm"></p><p>如果没有马上生效，等5分钟再看看。</p><p>以上就是小白版本GitHub Pages创建教程，同一个账号支持多个域名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;国内的互联网偏向保守，像GitHub这么慷慨的举动确实不多，以至于老蔡刚开始也以为GitHub只能绑定一个域名，建一个网站。&lt;/p&gt;
&lt;p&gt;但是，实际上GitHub Pages是支持绑定多个域名的，不过在他们的服务条款中禁止滥用，也就是说只要不是容易引发争议、违反美国法律的
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="GitHub" scheme="https://www.oldcai.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>经济下行，为何股价还屡创新高？</title>
    <link href="https://www.oldcai.com/investing/inflation/"/>
    <id>https://www.oldcai.com/investing/inflation/</id>
    <published>2020-08-25T17:30:58.000Z</published>
    <updated>2020-08-30T21:57:54.353Z</updated>
    
    <content type="html"><![CDATA[<p>今天思考了下现阶段消费类股票涨上天的合理性。</p><p>以前的经济周期中衰退的时候，是资产贬值，现金增值的。</p><p>现在全球都是用“看得见的手”来操控，经济下行就印钞，所以过往很多经验不一定行得通了。</p><p>以前经济下行的时候现金为王，现在现金都不再有避险性，大家都去买黄金。</p><p>目前体现在股市上的情况是，经济下行，政府就通过增发货币做宏观调控，推高股市整体市盈率。</p><p>理想状况是以后货币的购买力下降后，企业赚更多的面额的货币，把PE给挣下去。</p><p>感觉如果能再看远一步，就能从中赚到钱，可惜我还看不见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天思考了下现阶段消费类股票涨上天的合理性。&lt;/p&gt;
&lt;p&gt;以前的经济周期中衰退的时候，是资产贬值，现金增值的。&lt;/p&gt;
&lt;p&gt;现在全球都是用“看得见的手”来操控，经济下行就印钞，所以过往很多经验不一定行得通了。&lt;/p&gt;
&lt;p&gt;以前经济下行的时候现金为王，现在现金都不再有避
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="泡沫" scheme="https://www.oldcai.com/tags/%E6%B3%A1%E6%B2%AB/"/>
    
      <category term="通胀" scheme="https://www.oldcai.com/tags/%E9%80%9A%E8%83%80/"/>
    
  </entry>
  
  <entry>
    <title>创建只有 10MB 左右大小的docker镜像 - rust之actix-web - rust教程04</title>
    <link href="https://www.oldcai.com/rust/small-docker-image/"/>
    <id>https://www.oldcai.com/rust/small-docker-image/</id>
    <published>2020-07-15T17:30:58.000Z</published>
    <updated>2020-08-29T11:15:19.532Z</updated>
    
    <content type="html"><![CDATA[<p>该文章为<a href="https://www.oldcai.com/rust/web-server-response-ip/">构建 actix web</a>服务的后续，旨在利用 Dockerfile 给 rust 构建的 web 程序制作一个最小镜像。</p><p>利用 Dockerfile 制作 rust 程序的镜像，难点在于在一个 docker 容器中交叉编译、构建，生成的docker镜像又要打包到另一个容器。</p><p>好在 docker 已经提供了相关的支持，完成后的 Dockerfile 如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> oldcai/rust-musl-builder:latest as build</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /home/rust/src</span></span><br><span class="line"><span class="bash">WORKDIR /home/rust/src</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#RUN apk add --no-cache ca-certificates gcc mingw-w64-gcc libc-dev musl-dev</span></span></span><br><span class="line"><span class="bash"><span class="comment">#RUN rustup target add x86_64-unknown-linux-musl</span></span></span><br><span class="line"><span class="bash">RUN cargo build --release</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">FROM alpine:latest</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /web/</span></span><br><span class="line"><span class="bash">COPY --from=build /home/rust/src/target/x86_64-unknown-linux-musl/release/httpapi /web/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"./httpapi"</span>, <span class="string">"0.0.0.0:80"</span>]</span></span><br></pre></td></tr></table></figure><p>注解的部分是如果不用老蔡提供的这个镜像，可能需要装的一些库。</p><p>运行程序的基础镜像选择的最新版本的 alpine，镜像本身只有 5.57MB 大小，很适合golang、rust编译的、没什么依赖项的程序运行。</p><p>打包完毕后，总大小才13.5MB</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文章为&lt;a href=&quot;https://www.oldcai.com/rust/web-server-response-ip/&quot;&gt;构建 actix web&lt;/a&gt;服务的后续，旨在利用 Dockerfile 给 rust 构建的 web 程序制作一个最小镜像。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="rust" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/rust/"/>
    
    
      <category term="docker" scheme="https://www.oldcai.com/tags/docker/"/>
    
      <category term="actix" scheme="https://www.oldcai.com/tags/actix/"/>
    
      <category term="rancher" scheme="https://www.oldcai.com/tags/rancher/"/>
    
      <category term="server" scheme="https://www.oldcai.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>2个命令清理至少10GB CentOS磁盘</title>
    <link href="https://www.oldcai.com/linux/free-centos-disk-cn/"/>
    <id>https://www.oldcai.com/linux/free-centos-disk-cn/</id>
    <published>2020-07-12T01:07:45.000Z</published>
    <updated>2020-08-29T11:15:19.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我有一个VPS已经运行了将近两年，其磁盘使用率已超过90％。</p><p>因为没有什么业务在上面，所以也不想增加预算。</p><p>于是，我开始研究占用磁盘的目录，并最终找出了是谁占用了这么多磁盘。</p><p>不过好在清理它们没啥风险，并且也不费劲。</p><p>下面是清空磁盘的命令:</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="第一个命令"><a href="#第一个命令" class="headerlink" title="第一个命令"></a>第一个命令</h3><p>由于长时间运行，系统可能具有数十GB的日志，让日记服务的大小保持在特定大小是个好主意。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl <span class="attribute">--vacuum-size</span>=1G</span><br></pre></td></tr></table></figure><h3 id="第二个命令"><a href="#第二个命令" class="headerlink" title="第二个命令"></a>第二个命令</h3><p>清理yum缓存，这个在我这边也超过10GB。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br></pre></td></tr></table></figure><p>运行这些命令后，我的VPS系统释放了大约12GB的空间，然后又重新满血复活。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;我有一个VPS已经运行了将近两年，其磁盘使用率已超过90％。&lt;/p&gt;
&lt;p&gt;因为没有什么业务在上面，所以也不想增加预算。&lt;/p&gt;
&lt;p&gt;于是
      
    
    </summary>
    
      <category term="Linux" scheme="https://www.oldcai.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://www.oldcai.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Free CentOS Disk for 10G in 2 Commands</title>
    <link href="https://www.oldcai.com/linux/free-centos-disk/"/>
    <id>https://www.oldcai.com/linux/free-centos-disk/</id>
    <published>2020-07-12T00:54:45.000Z</published>
    <updated>2020-07-12T01:21:28.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>I have a personal VPS had been running for almost two years, and its disk usage is getting to 90%.</p><p>Increase the budget is not necessary because there isn’t any serious business running on it.</p><p>Then I started to investigate the disk-consuming directories and finally found out who was responsible for high disk usage, and .</p><p>The good thing is, there is no risk or any effort to exert for cleaning them.</p><p>Here are the commands to free those disk:</p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">journalctl <span class="comment">--vacuum-size=1G</span></span><br><span class="line">yum clean <span class="keyword">all</span></span><br></pre></td></tr></table></figure><h2 id="A-Little-Explanation"><a href="#A-Little-Explanation" class="headerlink" title="A Little Explanation"></a>A Little Explanation</h2><p>For the first command, because a long run system could have tens of GBs of log archives, making journal service keep its size below a specific size is always a good idea.</p><p>The second one is cleaning the yum cache, which is also above 10GBs on my side.</p><p>After running those commands, my VPS system had freed about 12GBs and back to bouncing again.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;I have a personal VPS had been
      
    
    </summary>
    
      <category term="Linux" scheme="https://www.oldcai.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://www.oldcai.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>响应IP的HTTP Server - rust之actix-web - rust教程03</title>
    <link href="https://www.oldcai.com/rust/web-server-response-ip/"/>
    <id>https://www.oldcai.com/rust/web-server-response-ip/</id>
    <published>2020-07-11T16:52:00.000Z</published>
    <updated>2020-07-11T17:18:43.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">new</span> <span class="keyword">return</span>-ip</span><br></pre></td></tr></table></figure><h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h2><blockquote><p>Cargo.toml</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">actix-web</span> = <span class="string">"0.7"</span></span><br><span class="line"><span class="attr">clap</span> = <span class="string">"2.33.1"</span></span><br></pre></td></tr></table></figure><blockquote><p>src/main.rs</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> actix_web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> actix_web::&#123;App, HttpRequest, Responder, server&#125;;</span><br><span class="line"><span class="keyword">use</span> clap::Arg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">index</span></span>(_req: &amp;HttpRequest) -&gt; <span class="keyword">impl</span> Responder &#123;</span><br><span class="line">    <span class="keyword">let</span> addr = _req.peer_addr().unwrap();</span><br><span class="line">    <span class="keyword">let</span> ip = addr.ip().to_string();</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">"&#123;&#125;\n"</span>, ip)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> matches = clap::App::new(<span class="string">"HTTP Proxy"</span>)</span><br><span class="line">        .arg(</span><br><span class="line">            Arg::with_name(<span class="string">"listen_addr"</span>)</span><br><span class="line">                .takes_value(<span class="literal">true</span>)</span><br><span class="line">                .value_name(<span class="string">"LISTEN ADDR"</span>)</span><br><span class="line">                .index(<span class="number">1</span>)</span><br><span class="line">                .required(<span class="literal">true</span>),</span><br><span class="line">        )</span><br><span class="line">        .get_matches();</span><br><span class="line">    <span class="keyword">let</span> listen_addr = matches.value_of(<span class="string">"listen_addr"</span>).unwrap();</span><br><span class="line">    server::new(|| App::new().resource(<span class="string">"/"</span>, |r| r.f(index)))</span><br><span class="line">        .bind(listen_addr)</span><br><span class="line">        .unwrap()</span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">run</span><span class="bash"> :::8000</span></span><br></pre></td></tr></table></figure><h3 id="如果只需要ipv4，则运行"><a href="#如果只需要ipv4，则运行" class="headerlink" title="如果只需要ipv4，则运行"></a>如果只需要ipv4，则运行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cargo</span> <span class="selector-tag">run</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:8000</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:<span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 或者指定 IPV6 地址请求</span></span><br><span class="line">curl -g -<span class="number">6</span> 'http://[::1]:<span class="number">8000</span>/'</span><br></pre></td></tr></table></figure><p>或者直接打开 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a></p><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><blockquote><p>IPV4返回： 127.0.0.1<br>IPV6返回： ::1</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>用actix实现出一个http服务端程序</p><p>用到模块：</p><ol><li>actix-web, 提供http</li><li>clap, 解析命令行参数</li></ol><p>实现功能：</p><ol><li>获取传入的绑定ip地址</li><li>绑定到地址后提供http服务</li><li>返回请求端的ip地址</li></ol><h2 id="benchmark测试"><a href="#benchmark测试" class="headerlink" title="benchmark测试"></a>benchmark测试</h2><p>打开release后，actix-web benchmark测试得16.14k</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Running <span class="number">30</span>s test @ <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/</span><br><span class="line">  <span class="number">12</span> threads <span class="keyword">and</span> <span class="number">400</span> connections</span><br><span class="line">    Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     <span class="number">1.11</span>ms  <span class="number">201.40</span>us  <span class="number">15.62</span>ms   <span class="number">97.33</span>%</span><br><span class="line">    Req/Sec    <span class="number">16.14</span>k     <span class="number">4.92</span>k   <span class="number">24.15</span>k    <span class="number">66.61</span>%</span><br><span class="line">  <span class="number">3044704</span> requests <span class="keyword">in</span> <span class="number">15.80</span>s, <span class="number">389.09</span>MB <span class="built_in">read</span></span><br><span class="line">  Socket errors: connect <span class="number">155</span>, <span class="built_in">read</span> <span class="number">122</span>, <span class="built_in">write</span> <span class="number">0</span>, timeout <span class="number">0</span></span><br><span class="line">Requests/<span class="built_in">sec</span>: <span class="number">192666.29</span></span><br><span class="line">Transfer/<span class="built_in">sec</span>:     <span class="number">24.62</span>MB</span><br></pre></td></tr></table></figure><p>debug模式时，actix-web QPS为6.21k</p><p>奇怪得是IPV6或者IPV4的选择也会影响QPS，</p><p>当用IPV6进行访问时，</p><p>release版本也会掉到10.86k左右，debug版本反而没啥变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="rust" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/rust/"/>
    
    
      <category term="actix" scheme="https://www.oldcai.com/tags/actix/"/>
    
      <category term="server" scheme="https://www.oldcai.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>传回TCP传入字符的Echo Server - rust之tokio - rust教程02</title>
    <link href="https://www.oldcai.com/rust/echo-server/"/>
    <id>https://www.oldcai.com/rust/echo-server/</id>
    <published>2020-07-09T23:24:02.000Z</published>
    <updated>2020-07-11T17:18:54.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">new</span> <span class="comment">--bin echo-server</span></span><br></pre></td></tr></table></figure><h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h2><blockquote><p>Cargo.toml</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">"0.2"</span>, features = [<span class="string">"full"</span>] &#125;</span><br><span class="line"><span class="attr">futures</span> = <span class="string">"0.3"</span></span><br></pre></td></tr></table></figure><blockquote><p>src/main.rs</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::net::TcpListener;</span><br><span class="line"><span class="keyword">use</span> tokio::prelude::*;</span><br><span class="line"><span class="keyword">use</span> futures::stream::StreamExt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line">async <span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="string">"127.0.0.1:6142"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> listener = TcpListener::bind(addr).await.unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here we convert the `TcpListener` to a stream of incoming connections</span></span><br><span class="line">    <span class="comment">// with the `incoming` method.</span></span><br><span class="line">    <span class="keyword">let</span> server = &#123;</span><br><span class="line">        async <span class="keyword">move</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> incoming = listener.incoming();</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(conn) = incoming.next().await &#123;</span><br><span class="line">                <span class="keyword">match</span> conn &#123;</span><br><span class="line">                    <span class="literal">Err</span>(e) =&gt; eprintln!(<span class="string">"accept failed = &#123;:?&#125;"</span>, e),</span><br><span class="line">                    <span class="literal">Ok</span>(<span class="keyword">mut</span> sock) =&gt; &#123;</span><br><span class="line">                        <span class="comment">// Spawn the future that echos the data and returns how</span></span><br><span class="line">                        <span class="comment">// many bytes were copied as a concurrent task.</span></span><br><span class="line">                        tokio::spawn(async <span class="keyword">move</span> &#123;</span><br><span class="line">                            <span class="comment">// Split up the reading and writing parts of the</span></span><br><span class="line">                            <span class="comment">// socket.</span></span><br><span class="line">                            <span class="keyword">let</span> (<span class="keyword">mut</span> reader, <span class="keyword">mut</span> writer) = sock.split();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">match</span> tokio::io::copy(&amp;<span class="keyword">mut</span> reader, &amp;<span class="keyword">mut</span> writer).await &#123;</span><br><span class="line">                                <span class="literal">Ok</span>(amt) =&gt; &#123;</span><br><span class="line">                                    <span class="built_in">println!</span>(<span class="string">"wrote &#123;&#125; bytes"</span>, amt);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="literal">Err</span>(err) =&gt; &#123;</span><br><span class="line">                                    eprintln!(<span class="string">"IO error &#123;:?&#125;"</span>, err);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Server running on localhost:6142"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the server and block this async fn until `server` spins down.</span></span><br><span class="line">    server.await;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h3 id="如果出错，则运行"><a href="#如果出错，则运行" class="headerlink" title="如果出错，则运行"></a>如果出错，则运行</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUST_BACKTRACE=full cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>可以查看到出错的堆栈</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h4><p>随便输入数据后，回车，会看到传回数据</p><blockquote><p>Input: oldcai.com</p></blockquote><blockquote><p>Output: oldcai.com</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用tokio实现出一个服务端程序</p><p>实现功能：</p><ol><li>监听本地6142端口</li><li>收到数据流后，传回同样数据</li></ol><p><code>let (mut reader, mut writer) = sock.split();</code>这句有些意思</p><p>把socket分成写和读两个对象，让处理更加简单了。</p><p><code>tokio::spawn</code>这句是能够并发的关键，没有这句就只能一次处理一个连接</p><p>而加上这句，其实代码逻辑还是和同步编程一样</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="rust" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/rust/"/>
    
    
      <category term="tokio" scheme="https://www.oldcai.com/tags/tokio/"/>
    
  </entry>
  
  <entry>
    <title>Hello World - rust之tokio- rust教程01</title>
    <link href="https://www.oldcai.com/rust/tokio-hello-world/"/>
    <id>https://www.oldcai.com/rust/tokio-hello-world/</id>
    <published>2020-07-09T22:57:53.000Z</published>
    <updated>2020-07-11T17:18:33.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">new</span> <span class="type">hello</span>-tokio</span><br></pre></td></tr></table></figure><h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h2><blockquote><p>Cargo.toml</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">"0.2"</span>, features = [<span class="string">"full"</span>] &#125;</span><br></pre></td></tr></table></figure><blockquote><p>src/main.rs</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::net::TcpStream;</span><br><span class="line"><span class="keyword">use</span> tokio::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line">async <span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> stream = TcpStream::connect(<span class="string">"127.0.0.1:6142"</span>).await.unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"created stream"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = stream.write(<span class="string">b"hello world\n"</span>).await;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"wrote to stream; success=&#123;:?&#125;"</span>, result.is_ok());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h3 id="如果出错，则运行"><a href="#如果出错，则运行" class="headerlink" title="如果出错，则运行"></a>如果出错，则运行</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUST_BACKTRACE=full cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>可以查看到出错的堆栈</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用tokio实现出一个客户端程序<br>实现功能：</p><ol><li>连接到本地6142端口</li><li>发送字符串<code>hello world\n</code></li><li>检测是否发送成功并打印</li></ol><p>可能错误：<br>本地端口监听失败或还未监听，会出现错误：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread 'main' panicked <span class="keyword">at</span> 'called `Result::unwrap()` <span class="keyword">on</span> an `Err` value: Os &#123; code: <span class="number">61</span>, kind: ConnectionRefused, message: <span class="string">"Connection refused"</span> &#125;', src/main.rs:<span class="number">6</span>:<span class="number">22</span></span><br><span class="line">note: <span class="built_in">run</span> <span class="keyword">with</span> `RUST_BACKTRACE=<span class="number">1</span>` environment variable <span class="keyword">to</span> display a backtrace</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="rust" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/rust/"/>
    
    
      <category term="tokio" scheme="https://www.oldcai.com/tags/tokio/"/>
    
  </entry>
  
  <entry>
    <title>微星MAG Z390 TOMAHAWK战斧导弹 + i5 9600kf EFI</title>
    <link href="https://www.oldcai.com/hackintosh/msi-mag-z390-tomahawk-i5-9600kf/"/>
    <id>https://www.oldcai.com/hackintosh/msi-mag-z390-tomahawk-i5-9600kf/</id>
    <published>2019-11-23T11:39:40.000Z</published>
    <updated>2019-11-26T15:59:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>适用系统版本：<code>10.15</code></p><p>下载地址：<br><a href="http://img.oldcai.com/EFIs/z390-i5-9600kf-EFI.zip" target="_blank" rel="noopener">直接下载</a> (不保证长期可以访问）</p><p><a href="https://pan.baidu.com/s/1WnyfbuVqHUSKE86SarLdQA" target="_blank" rel="noopener">百度网盘</a><br>提取码: rrdm</p><p>已解决问题：</p><ul><li>能正常关机</li><li>可睿频、可降频到最低1.1GHz。可能还能更低，未观察到</li><li>可正常屏幕睡眠</li><li>可正常休眠</li></ul><p>跑分结果：<br><a href="https://browser.geekbench.com/v5/cpu/653517" target="_blank" rel="noopener">https://browser.geekbench.com/v5/cpu/653517</a></p><p>CPU 观察工具：<a href="https://software.intel.com/en-us/articles/intel-power-gadget" target="_blank" rel="noopener">intel Power Gadget</a></p><p><img src="http://img.oldcai.com/mweb/15745123442971.jpg" alt></p><p>CPU Benchmark跑分工具：<a href="https://www.geekbench.com/" target="_blank" rel="noopener">Geekbench 5试用版</a></p><p>这个EFI，同样的主板(微星MAG Z390 TOMAHAWK战斧导弹)应该都能用。</p><p>碰到其他什么问题，可以留言讨论。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;适用系统版本：&lt;code&gt;10.15&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;br&gt;&lt;a href=&quot;http://img.oldcai.com/EFIs/z390-i5-9600kf-EFI.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;直接下载
      
    
    </summary>
    
      <category term="Mac" scheme="https://www.oldcai.com/categories/Mac/"/>
    
    
      <category term="EFI" scheme="https://www.oldcai.com/tags/EFI/"/>
    
  </entry>
  
  <entry>
    <title>小孩才分对错，大人只看利弊？</title>
    <link href="https://www.oldcai.com/random%20thoughts/difference-between-children-and-adults/"/>
    <id>https://www.oldcai.com/random thoughts/difference-between-children-and-adults/</id>
    <published>2019-09-12T11:00:50.000Z</published>
    <updated>2019-11-23T12:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直听人说，小孩才分对错，大人只看利弊。<br>仿佛突破道德伦常就能把幼稚给治疗了。</p><p>在我看来，大人对衡量标准应该是心智成熟。<br>心理和认知上不再幼稚。</p><p>具体来说，大人更注重事实，至少引用转发之前，更多地调查、证明，有自己对判断；<br>对现实有清晰的认知，不会经常颠覆认知，情绪更加稳定；<br>小孩什么都靠想象，情绪更容易煽动。</p><p>所以，有岁数了，也不一定是大人；<br>把判断对错的能力丢了，更像是小孩的行径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直听人说，小孩才分对错，大人只看利弊。&lt;br&gt;仿佛突破道德伦常就能把幼稚给治疗了。&lt;/p&gt;
&lt;p&gt;在我看来，大人对衡量标准应该是心智成熟。&lt;br&gt;心理和认知上不再幼稚。&lt;/p&gt;
&lt;p&gt;具体来说，大人更注重事实，至少引用转发之前，更多地调查、证明，有自己对判断；&lt;br&gt;对现
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>把cppjieba打包成了Docker镜像</title>
    <link href="https://www.oldcai.com/server/cppjieba-service/"/>
    <id>https://www.oldcai.com/server/cppjieba-service/</id>
    <published>2019-07-31T16:52:00.000Z</published>
    <updated>2020-04-25T06:10:11.354Z</updated>
    
    <content type="html"><![CDATA[<p>有需要的朋友，可以到<a href="https://hub.docker.com/repository/docker/oldcai/cppjieba-service" target="_blank" rel="noopener">dockerhub cppjieba-service页面</a>了解更多</p><p>使用方法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull oldcai/cppjieba-<span class="string">service:</span>latest</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p 8008:80 oldcai/cppjieba-service:latest</span></span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl 'localhost:<span class="number">8008</span>/?key=工信处女干事每月经过下属科室都要亲口交代24口交换机等技术性器件的安装工作'</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[<span class="string">"工信处"</span>, <span class="string">"女干事"</span>, <span class="string">"每月"</span>, <span class="string">"经过"</span>, <span class="string">"下属"</span>, <span class="string">"科室"</span>, <span class="string">"都"</span>, <span class="string">"要"</span>, <span class="string">"亲口"</span>, <span class="string">"交代"</span>, <span class="string">"2"</span>, <span class="string">"4"</span>, <span class="string">"口"</span>, <span class="string">"交换机"</span>, <span class="string">"等"</span>, <span class="string">"技术性"</span>, <span class="string">"器件"</span>, <span class="string">"的"</span>, <span class="string">"安装"</span>, <span class="string">"工作"</span>]</span><br></pre></td></tr></table></figure><p>有问题或者建议欢迎留言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有需要的朋友，可以到&lt;a href=&quot;https://hub.docker.com/repository/docker/oldcai/cppjieba-service&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dockerhub cppjieba-se
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="docker" scheme="https://www.oldcai.com/tags/docker/"/>
    
      <category term="自然语言" scheme="https://www.oldcai.com/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/"/>
    
      <category term="cpp" scheme="https://www.oldcai.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Remove Docker Images Older Than One week/month/year Automatically</title>
    <link href="https://www.oldcai.com/server/remove-old-docker-images/"/>
    <id>https://www.oldcai.com/server/remove-old-docker-images/</id>
    <published>2019-07-30T08:26:00.000Z</published>
    <updated>2019-07-30T10:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h2><p>I’m using rancher pipelines to deploy my service immediately after I push my code to GitHub, it always creates a new image but would never clean it.</p><p>I guess other continuous integration solutions would do the same.</p><p>Next, I’m going to share some lines of code on how to deal with it.</p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>Let’s say the project I’m going to build is named GetShitDone.</p><p>The way to clear old images is as simple as copy and paste the codes below.</p><blockquote><p>The images that are still in use would be protected and wouldn’t be removed.<br>It’s safe to use these commands.</p></blockquote><h3 id="Remove-images-older-than-one-week"><a href="#Remove-images-older-than-one-week" class="headerlink" title="Remove images older than one week"></a>Remove images older than one week</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project_name=GetShitDone</span><br><span class="line">docker images | <span class="type">grep</span> $&#123;project_name&#125; | <span class="type">grep</span> 'weeks ago\|<span class="type">months</span> ago\|<span class="type">years</span> ago' | <span class="type">awk</span> '&#123;print $<span class="number">3</span>&#125;'| <span class="type">xargs</span> docker rmi</span><br></pre></td></tr></table></figure><p>If you would like to keep the images for months or longer, you can remove the <code>weeks ago</code> and <code>months ago</code> part.</p><h3 id="Only-remove-images-earlier-than-one-month"><a href="#Only-remove-images-earlier-than-one-month" class="headerlink" title="Only remove images earlier than one month"></a>Only remove images earlier than one month</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project_name=GetShitDone</span><br><span class="line">docker images | <span class="type">grep</span> $&#123;project_name&#125; | <span class="type">grep</span> 'months ago\|<span class="type">years</span> ago' | <span class="type">awk</span> '&#123;print $<span class="number">3</span>&#125;'| <span class="type">xargs</span> docker rmi</span><br></pre></td></tr></table></figure><h3 id="And-clean-images-created-one-year-ago"><a href="#And-clean-images-created-one-year-ago" class="headerlink" title="And clean images created one year ago"></a>And clean images created one year ago</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project_name=GetShitDone</span><br><span class="line">docker images | <span class="keyword">grep</span> $&#123;project_name&#125; | <span class="keyword">grep</span> <span class="string">'years ago'</span> | awk <span class="string">'&#123;print $3&#125;'</span>| xargs docker rmi</span><br></pre></td></tr></table></figure><p>That’s all of it, cheers.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reason&quot;&gt;&lt;a href=&quot;#Reason&quot; class=&quot;headerlink&quot; title=&quot;Reason&quot;&gt;&lt;/a&gt;Reason&lt;/h2&gt;&lt;p&gt;I’m using rancher pipelines to deploy my service immed
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="CI" scheme="https://www.oldcai.com/tags/CI/"/>
    
      <category term="Docker" scheme="https://www.oldcai.com/tags/Docker/"/>
    
      <category term="Rancher" scheme="https://www.oldcai.com/tags/Rancher/"/>
    
      <category term="Kubernetes" scheme="https://www.oldcai.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Update Oh My Zsh Automatically Using Crontab</title>
    <link href="https://www.oldcai.com/server/auto-update-on-my-zsh/"/>
    <id>https://www.oldcai.com/server/auto-update-on-my-zsh/</id>
    <published>2019-02-19T18:29:00.000Z</published>
    <updated>2019-03-02T22:08:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h2><p>Oh My Zsh is a cool zsh configuration set, and it’s very active, updates the code base quite often, which is good.</p><p>But when sometimes we are eager to change the world, it still asks us to update it first. That would be a little bit boring after doing these for several times.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>We can update Oh My Zsh by adding this line below to crontab.</p><p><code>0    3    *    *    *    zsh -c &#39;DISABLE_AUTO_UPDATE=true &amp;&amp; export ZSH=$HOME/.oh-my-zsh &amp;&amp; source $ZSH/oh-my-zsh.sh &amp;&amp; upgrade_oh_my_zsh 2&gt;&amp;1&#39; &gt;&gt; /dev/null</code></p><p>Normally, crontab can be modified by command <code>crontab -e</code></p><p><code>DISABLE_AUTO_UPDATE=true</code></p><p>After all, we can add the line above to <code>.zshrc</code> to forbid Oh My Zsh asks us for update.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reason&quot;&gt;&lt;a href=&quot;#Reason&quot; class=&quot;headerlink&quot; title=&quot;Reason&quot;&gt;&lt;/a&gt;Reason&lt;/h2&gt;&lt;p&gt;Oh My Zsh is a cool zsh configuration set, and it’s ve
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="zsh" scheme="https://www.oldcai.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Filebeat Not Able to Connect to Logstash</title>
    <link href="https://www.oldcai.com/server/logstash-filebeat-cert/"/>
    <id>https://www.oldcai.com/server/logstash-filebeat-cert/</id>
    <published>2018-12-13T22:35:00.000Z</published>
    <updated>2018-12-14T07:17:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Possible-Errors"><a href="#Possible-Errors" class="headerlink" title="Possible Errors:"></a>Possible Errors:</h2><ul><li>Failed to connect to backoff(async(tcp://10.10.10.1:5044)): x509: certificate is valid for 127.0.0.1, not 10.10.10.1</li><li>x509: cannot validate certificate for <code>127.0.0.1</code> because it doesn’t contain any IP SANs</li></ul><h2 id="Step-1-Add-subjectAltName"><a href="#Step-1-Add-subjectAltName" class="headerlink" title="Step 1 - Add subjectAltName"></a>Step 1 - Add subjectAltName</h2><p>Add the line below into file <code>/etc/pki/tls/openssl.cnf</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subjectAltName = <span class="built_in">IP</span>: <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span></span><br></pre></td></tr></table></figure><p>You can change the ip address to your logstash server address</p><h2 id="Step-2-Regenerate-Certification"><a href="#Step-2-Regenerate-Certification" class="headerlink" title="Step 2 - Regenerate Certification"></a>Step 2 - Regenerate Certification</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -config <span class="regexp">/etc/</span>pki<span class="regexp">/tls/</span>openssl.cnf -x509 -days <span class="number">3650</span> -batch -nodes -newkey <span class="string">rsa:</span><span class="number">2048</span> -keyout <span class="regexp">/etc/</span>pki<span class="regexp">/tls/</span><span class="keyword">private</span><span class="regexp">/logstash-forwarder.key -out /</span>etc<span class="regexp">/pki/</span>tls<span class="regexp">/certs/</span>logstash-forwarder.crt</span><br></pre></td></tr></table></figure><p>Then you can use the cert file <code>/etc/pki/tls/certs/logstash-forwarder.crt</code> to authorize filebeat to connect to logstash.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Possible-Errors&quot;&gt;&lt;a href=&quot;#Possible-Errors&quot; class=&quot;headerlink&quot; title=&quot;Possible Errors:&quot;&gt;&lt;/a&gt;Possible Errors:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Failed to 
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="ELK" scheme="https://www.oldcai.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Better Way to Migrate an In-Production PostgreSQL Database to a Different Data Center or Cloud</title>
    <link href="https://www.oldcai.com/server/large-postgresql-database-migration/"/>
    <id>https://www.oldcai.com/server/large-postgresql-database-migration/</id>
    <published>2018-11-27T17:05:00.000Z</published>
    <updated>2019-12-23T18:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>To practice this guide, PostgreSQL version should be at least 9.6</code></pre><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR:"></a>TL;DR:</h2><p>First, setup a master-slave replication for PostgreSQL.<br>Then switch the slave server to master.</p><h2 id="Longer-Story"><a href="#Longer-Story" class="headerlink" title="Longer Story"></a>Longer Story</h2><h3 id="Situation"><a href="#Situation" class="headerlink" title="Situation"></a>Situation</h3><p>In our case, the database is almost 300GB, it would take at least 3 hours to migrate to a new server, including export, transfer and import time.</p><p>Sometimes, it’s acceptable to shutdown sites or apps for a short time to do some maintain, but what if the data grows and the migration may takes days or weeks?</p><p>For services in-production, you would expect it always online.</p><p>Yes, we hope we can keep the service online while transferring data and switch it in minutes.</p><h3 id="Struggles"><a href="#Struggles" class="headerlink" title="Struggles"></a>Struggles</h3><p>I have checked <a href="https://www.howtoforge.com/tutorial/how-to-set-up-master-slave-replication-for-postgresql-96-on-ubuntu-1604/" target="_blank" rel="noopener">How to Set-Up Master-Slave Replication for PostgreSQL 9.6 on Ubuntu 16.04</a> and tried many times of making replicas on the new server but always fail.<br>It reports the same error: <code>requested WAL segment 00000001000001CD00000055 has already been removed</code> every time.</p><p>After did some research and I found that’s because my database is too large, transfer would take too much time, and the <code>wal_keep_segments</code> is not enough for that long time of transferring files.</p><h3 id="Quick-Fix"><a href="#Quick-Fix" class="headerlink" title="Quick Fix"></a>Quick Fix</h3><p>Maybe it can be fixed by increasing <code>wal_keep_segments</code> to a greater number, but that introduces another problem: we need to calculate the proper number, enough keeping WAL files after the long and unsure time of data transferring, and not too big that would slow down the running service.<br>Of course, that’s not <strong>the best solution</strong>.</p><h3 id="Better-Solutions"><a href="#Better-Solutions" class="headerlink" title="Better Solutions"></a>Better Solutions</h3><p>Later, I found a more reliable and more robust solution <a href="https://www.postgresql.org/message-id/8154f0c1-5ac3-8769-d0b6-81c65c666dd7%40dalibo.com" target="_blank" rel="noopener">in PostgreSQL’s mail list</a>:</p><blockquote><p>You could use <code>-X stream</code> instead of <code>--xlog</code> (which is an alias for <code>-X fetch</code>). This consumes two wal senders instead of one, but greatly reduce the probability of having this error.<br>The only way to really prevent this error is using replication slots, but the support for pg_basebackup is only available in 9.6.</p></blockquote><p>I would show you how to use <code>replication slots</code> and use stream to transfer the transaction log files(WAL files) below.</p><h2 id="Step-1-Enable-Replication-Slots"><a href="#Step-1-Enable-Replication-Slots" class="headerlink" title="Step 1 - Enable Replication Slots"></a>Step 1 - Enable Replication Slots</h2><p>PostgreSQL disabled replication slots by default, we need to setup by adding lines to the bottom of <code>/var/lib/pgsql/9.6/data/postgresql.conf</code> below:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">synchronous_standby_names</span> = <span class="string">'slave001'</span></span><br><span class="line"><span class="attr">wal_level</span> = replica</span><br><span class="line"><span class="attr">hot_standby</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">max_wal_senders</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">wal_keep_segments</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">max_replication_slots</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">synchronous_commit</span> = local</span><br></pre></td></tr></table></figure><p>Then restart the PostgreSQL service by <code>service postgresql-9.6 restart</code>.</p><h2 id="Step-2-Creating-a-Replication-Slot"><a href="#Step-2-Creating-a-Replication-Slot" class="headerlink" title="Step 2 - Creating a Replication Slot"></a>Step 2 - Creating a Replication Slot</h2><p>Connect to master PostgreSQL by <code>sudo -u postgres psql</code><br>Then execute<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">pg_create_physical_replication_slot</span>(<span class="params"><span class="string">'slot_for_migration'</span>, <span class="literal">true</span></span>)</span>;</span><br></pre></td></tr></table></figure></p><p>We can check the progress by selecting:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_replication_slots;</span><br></pre></td></tr></table></figure></p><p>If you want to delete this slot later after migration, you can use this command:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'select pg_drop_replication_slot('slot_for_migration')<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>Use it after remove the initial prime if you know what this command would do.</p><h2 id="Step-3-Create-a-User-for-Replication"><a href="#Step-3-Create-a-User-for-Replication" class="headerlink" title="Step 3 - Create a User for Replication"></a>Step 3 - Create a User for Replication</h2><p>Run commands with psql as user postgres on the master side:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> replica <span class="keyword">REPLICATION</span> LOGIN ENCRYPTED <span class="keyword">PASSWORD</span> <span class="string">'your password here'</span>;</span><br></pre></td></tr></table></figure><p>Add these lines below to master’s pg_hba.conf</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Localhost</span><br><span class="line">host    replication     replica          <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span>              md5</span><br><span class="line"> </span><br><span class="line"># PostgreSQL Master IP address</span><br><span class="line">host    replication     replica          <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span>/<span class="number">32</span>            md5</span><br><span class="line"> </span><br><span class="line"># PostgreSQL SLave IP address</span><br><span class="line">host    replication     replica          <span class="number">10.10</span><span class="number">.10</span><span class="number">.11</span>/<span class="number">32</span>            md5</span><br></pre></td></tr></table></figure><p>Then restart the PostgreSQL server.</p><h2 id="Step-4-Transfer-Data-From-Another-Data-Center"><a href="#Step-4-Transfer-Data-From-Another-Data-Center" class="headerlink" title="Step 4 - Transfer Data From Another Data Center"></a>Step 4 - Transfer Data From Another Data Center</h2><p>Now, run on the slave server:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_basebackup -h <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span> -p <span class="number">5432</span> -S slot_for_migration -U replica -D /var/lib/pgsql/<span class="number">9.6</span>/data --checkpoint=fast -R -P -X stream</span><br></pre></td></tr></table></figure></p><p>It would ask you to type password.<br>Now, you need to wait until it finishes syncing. This step is very time consuming, usually takes hours or even days.</p><h2 id="Step-5-Restart-The-Slave-PostgreSQL-Server"><a href="#Step-5-Restart-The-Slave-PostgreSQL-Server" class="headerlink" title="Step 5 - Restart The Slave PostgreSQL Server"></a>Step 5 - Restart The Slave PostgreSQL Server</h2><p>After syncing finished, run <code>service postgresql-9.6 restart</code>, there should be a sync before the standby server up and run, wouldn’t take too much time if you didn’t leave the console too long after step 4.</p><p>We are almost there. Now, we can connect to the server by psql and do some check, make sure our data are the latest.</p><h2 id="Step-6-Promote-the-Slave-to-Master-Like-a-King"><a href="#Step-6-Promote-the-Slave-to-Master-Like-a-King" class="headerlink" title="Step 6 - Promote the Slave to Master Like a King"></a>Step 6 - Promote the Slave to Master Like a King</h2><p>Finally, we still need to promote our slave postgresql server to master before we finish our database migration.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl <span class="literal">promote</span> -D</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;To practice this guide, PostgreSQL version should be at least 9.6
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="postgresql" scheme="https://www.oldcai.com/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>atop DSK 示数的含义，帮你捋一捋</title>
    <link href="https://www.oldcai.com/linux/atop-dsk/"/>
    <id>https://www.oldcai.com/linux/atop-dsk/</id>
    <published>2018-10-27T10:50:52.000Z</published>
    <updated>2018-10-28T03:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次介绍了<a href="/linux/atop/">atop在定位服务器瓶颈、调查宕机事件</a>上的作用，今天再来具体看看 DSK 示数的含义，</p><h2 id="一个悲伤的故事"><a href="#一个悲伤的故事" class="headerlink" title="一个悲伤的故事"></a>一个悲伤的故事</h2><p>前天，公司服务器一周内第5次宕机!!!</p><p>苦苦找寻原因的老蔡，天天盯着各种监控程序百思不得其解，<br>很巧合地，这次宕机的时候，老蔡正巧在服务器上面用atop盯着监控，于是捕捉到了宕机的那一刻的异常，如下图所示。</p><table><thead><tr><th style="text-align:center"><a href="/images/2018/10/ali-atop-busy.jpg"><img src="/images/2018/10/ali-atop-busy.jpg" alt="DSK繁忙示例"></a></th></tr></thead><tbody><tr><td style="text-align:center"><strong>点击可看大图</strong></td></tr></tbody></table><p>可以说，如果早知道atop里面DSK的具体含义，说不定前天就已经“破案”了。<br>可惜老蔡刚开始对这个示数也只有个大致的认知，只知道数字越大就说明读写越高，而具体<code>read</code>和<code>write</code>表示的什么，以及单位是什么，却是不知。<br>还以为是为了紧凑，把明显的KB/s或者MB/s去掉了。<br><a id="more"></a></p><p>那么下面具体来讲解讲解这幅图里面的数值和含义吧</p><h2 id="DSK示数解读"><a href="#DSK示数解读" class="headerlink" title="DSK示数解读"></a>DSK示数解读</h2><table><thead><tr><th style="text-align:center">示数</th><th style="text-align:center">含义</th><th style="text-align:center">例子解读</th></tr></thead><tbody><tr><td style="text-align:center"><strong>vda</strong></td><td style="text-align:center">盘符</td><td style="text-align:center">例子中是系统盘</td></tr><tr><td style="text-align:center"><strong>busy 100%</strong></td><td style="text-align:center">平时是硬盘繁忙情况的百分比</td><td style="text-align:center">磁盘io满了</td></tr><tr><td style="text-align:center"><strong>read 27</strong></td><td style="text-align:center">每秒读取请求的数量</td><td style="text-align:center">每秒27次</td></tr><tr><td style="text-align:center"><strong>write 9</strong></td><td style="text-align:center">每秒写的请求数量</td><td style="text-align:center">每秒9次</td></tr><tr><td style="text-align:center"><strong>KiB/r 4</strong></td><td style="text-align:center">每次读请求所读取的文件大小的平均值</td><td style="text-align:center">4k随机读为主</td></tr><tr><td style="text-align:center"><strong>KiB/w 29</strong></td><td style="text-align:center">每次写请求写的文件大小平均值</td><td style="text-align:center">每次平均写29kB</td></tr><tr><td style="text-align:center"><strong>Mbr/s 0.0</strong></td><td style="text-align:center">每秒读盘的吞吐量</td><td style="text-align:center">四舍五入为0了</td></tr><tr><td style="text-align:center"><strong>Mbw/s 0.0</strong></td><td style="text-align:center">每秒写入的吞吐量</td><td style="text-align:center">同上</td></tr><tr><td style="text-align:center"><strong>avq 1.01</strong></td><td style="text-align:center">平均磁盘读写队列长度</td><td style="text-align:center">1.01个，说明读写不重</td></tr><tr><td style="text-align:center"><strong>avio 278ms</strong></td><td style="text-align:center">平均每个读写请求需要的时间</td><td style="text-align:center">硬盘读写延迟<code>278ms</code>，对于单次io等待，可以说是很高了</td></tr></tbody></table><p>而老蔡刚开始的时候以为是自己的程序磁盘占用太多，把读写单位当做<code>MB/s</code>来理解。<br>现在明白真正该怀疑是什么问题后，才恍然大悟——之前的解读是错的。<br>那么，机智的你，猜到是什么原因导致的宕机了吗？欢迎留言哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次介绍了&lt;a href=&quot;/linux/atop/&quot;&gt;atop在定位服务器瓶颈、调查宕机事件&lt;/a&gt;上的作用，今天再来具体看看 DSK 示数的含义，&lt;/p&gt;
&lt;h2 id=&quot;一个悲伤的故事&quot;&gt;&lt;a href=&quot;#一个悲伤的故事&quot; class=&quot;headerlink&quot; title=&quot;一个悲伤的故事&quot;&gt;&lt;/a&gt;一个悲伤的故事&lt;/h2&gt;&lt;p&gt;前天，公司服务器一周内第5次宕机!!!&lt;/p&gt;
&lt;p&gt;苦苦找寻原因的老蔡，天天盯着各种监控程序百思不得其解，&lt;br&gt;很巧合地，这次宕机的时候，老蔡正巧在服务器上面用atop盯着监控，于是捕捉到了宕机的那一刻的异常，如下图所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/images/2018/10/ali-atop-busy.jpg&quot;&gt;&lt;img src=&quot;/images/2018/10/ali-atop-busy.jpg&quot; alt=&quot;DSK繁忙示例&quot;&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;点击可看大图&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以说，如果早知道atop里面DSK的具体含义，说不定前天就已经“破案”了。&lt;br&gt;可惜老蔡刚开始对这个示数也只有个大致的认知，只知道数字越大就说明读写越高，而具体&lt;code&gt;read&lt;/code&gt;和&lt;code&gt;write&lt;/code&gt;表示的什么，以及单位是什么，却是不知。&lt;br&gt;还以为是为了紧凑，把明显的KB/s或者MB/s去掉了。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.oldcai.com/categories/linux/"/>
    
      <category term="服务器运维" scheme="https://www.oldcai.com/categories/linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="atop" scheme="https://www.oldcai.com/tags/atop/"/>
    
  </entry>
  
  <entry>
    <title>Run rsync Service Only When Needed By Using xinetd</title>
    <link href="https://www.oldcai.com/linux/rsync-via-xinetd/"/>
    <id>https://www.oldcai.com/linux/rsync-via-xinetd/</id>
    <published>2018-10-24T13:33:00.000Z</published>
    <updated>2018-10-24T17:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-Not-Use-Rsyncd-Service-Directly"><a href="#Why-Not-Use-Rsyncd-Service-Directly" class="headerlink" title="Why Not Use Rsyncd Service Directly"></a>Why Not Use Rsyncd Service Directly</h2><p>We do not need <code>rsyncd</code> keep running and cost our precious memory, in fact most of us only use it once in a while for backup.</p><p>So we need a way to keep our sync service on without the <code>rsyncd</code> process.</p><h2 id="What-Is-Xinetd"><a href="#What-Is-Xinetd" class="headerlink" title="What Is Xinetd"></a>What Is Xinetd</h2><p><code>xinetd</code> is a service that can open network based services only when they are connected.</p><p>When <code>xinetd</code> listens to a port, while the traffic comes in, <code>xinetd</code> could launch the real service program and transfer traffic to it.</p><h2 id="How-to-Config-xinetd-Work-With-rsync"><a href="#How-to-Config-xinetd-Work-With-rsync" class="headerlink" title="How to Config xinetd Work With rsync"></a>How to Config xinetd Work With rsync</h2><p>We can create a file <code>/etc/xinetd.d/rsync</code> filled with codes below.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">service rsync</span><br><span class="line">&#123;</span><br><span class="line">        <span class="builtin-name">disable</span>         = <span class="literal">no</span></span><br><span class="line">        socket_type     = stream</span><br><span class="line">        wait            = <span class="literal">no</span></span><br><span class="line">       <span class="built_in"> user </span>           = rsync</span><br><span class="line">       <span class="built_in"> server </span>         = /usr/bin/rsync</span><br><span class="line">        server_args     = --daemon</span><br><span class="line">        log_on_failure  += USERID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips:</p><blockquote><p>Other configs in <code>/etc/rsyncd.conf</code> and <code>/etc/rsyncd.pass</code> are just like what they were when you are using <code>rsyncd</code> service.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why-Not-Use-Rsyncd-Service-Directly&quot;&gt;&lt;a href=&quot;#Why-Not-Use-Rsyncd-Service-Directly&quot; class=&quot;headerlink&quot; title=&quot;Why Not Use Rsyncd Ser
      
    
    </summary>
    
      <category term="linux" scheme="https://www.oldcai.com/categories/linux/"/>
    
    
      <category term="xinetd" scheme="https://www.oldcai.com/tags/xinetd/"/>
    
      <category term="rsync" scheme="https://www.oldcai.com/tags/rsync/"/>
    
  </entry>
  
</feed>
