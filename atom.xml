<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老蔡博客</title>
  
  <subtitle>老蔡的总结和思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.oldcai.com/"/>
  <updated>2020-07-09T23:28:43.306Z</updated>
  <id>https://www.oldcai.com/</id>
  
  <author>
    <name>oldcai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>传回TCP传入字符的Echo Server - rust之tokio教程02</title>
    <link href="https://www.oldcai.com/rust/echo-server/"/>
    <id>https://www.oldcai.com/rust/echo-server/</id>
    <published>2020-07-09T23:24:02.000Z</published>
    <updated>2020-07-09T23:28:43.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">new</span> <span class="comment">--bin echo-server</span></span><br></pre></td></tr></table></figure><h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h2><blockquote><p>Cargo.toml</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">"0.2"</span>, features = [<span class="string">"full"</span>] &#125;</span><br><span class="line"><span class="attr">futures</span> = <span class="string">"0.3"</span></span><br></pre></td></tr></table></figure><blockquote><p>src/main.rs</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::net::TcpListener;</span><br><span class="line"><span class="keyword">use</span> tokio::prelude::*;</span><br><span class="line"><span class="keyword">use</span> futures::stream::StreamExt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line">async <span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="string">"127.0.0.1:6142"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> listener = TcpListener::bind(addr).await.unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here we convert the `TcpListener` to a stream of incoming connections</span></span><br><span class="line">    <span class="comment">// with the `incoming` method.</span></span><br><span class="line">    <span class="keyword">let</span> server = &#123;</span><br><span class="line">        async <span class="keyword">move</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> incoming = listener.incoming();</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(conn) = incoming.next().await &#123;</span><br><span class="line">                <span class="keyword">match</span> conn &#123;</span><br><span class="line">                    <span class="literal">Err</span>(e) =&gt; eprintln!(<span class="string">"accept failed = &#123;:?&#125;"</span>, e),</span><br><span class="line">                    <span class="literal">Ok</span>(<span class="keyword">mut</span> sock) =&gt; &#123;</span><br><span class="line">                        <span class="comment">// Spawn the future that echos the data and returns how</span></span><br><span class="line">                        <span class="comment">// many bytes were copied as a concurrent task.</span></span><br><span class="line">                        tokio::spawn(async <span class="keyword">move</span> &#123;</span><br><span class="line">                            <span class="comment">// Split up the reading and writing parts of the</span></span><br><span class="line">                            <span class="comment">// socket.</span></span><br><span class="line">                            <span class="keyword">let</span> (<span class="keyword">mut</span> reader, <span class="keyword">mut</span> writer) = sock.split();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">match</span> tokio::io::copy(&amp;<span class="keyword">mut</span> reader, &amp;<span class="keyword">mut</span> writer).await &#123;</span><br><span class="line">                                <span class="literal">Ok</span>(amt) =&gt; &#123;</span><br><span class="line">                                    <span class="built_in">println!</span>(<span class="string">"wrote &#123;&#125; bytes"</span>, amt);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="literal">Err</span>(err) =&gt; &#123;</span><br><span class="line">                                    eprintln!(<span class="string">"IO error &#123;:?&#125;"</span>, err);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Server running on localhost:6142"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the server and block this async fn until `server` spins down.</span></span><br><span class="line">    server.await;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h3 id="如果出错，则运行"><a href="#如果出错，则运行" class="headerlink" title="如果出错，则运行"></a>如果出错，则运行</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUST_BACKTRACE=full cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>可以查看到出错的堆栈</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h4><p>随便输入数据后，回车，会看到传回数据</p><blockquote><p>Input: oldcai.com</p></blockquote><blockquote><p>Output: oldcai.com</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用tokio实现出一个服务端程序<br>实现功能：</p><ol><li>监听本地6142端口</li><li>收到数据流后，传回同样数据</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="tokio" scheme="https://www.oldcai.com/tags/tokio/"/>
    
  </entry>
  
  <entry>
    <title>Hello World - rust之tokio教程01</title>
    <link href="https://www.oldcai.com/rust/tokio-hello-world/"/>
    <id>https://www.oldcai.com/rust/tokio-hello-world/</id>
    <published>2020-07-09T22:57:53.000Z</published>
    <updated>2020-07-09T23:07:15.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">new</span> <span class="type">hello</span>-tokio</span><br></pre></td></tr></table></figure><h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h2><blockquote><p>Cargo.toml</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">"0.2"</span>, features = [<span class="string">"full"</span>] &#125;</span><br></pre></td></tr></table></figure><blockquote><p>src/main.rs</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::net::TcpStream;</span><br><span class="line"><span class="keyword">use</span> tokio::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line">async <span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> stream = TcpStream::connect(<span class="string">"127.0.0.1:6142"</span>).await.unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"created stream"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = stream.write(<span class="string">b"hello world\n"</span>).await;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"wrote to stream; success=&#123;:?&#125;"</span>, result.is_ok());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h3 id="如果出错，则运行"><a href="#如果出错，则运行" class="headerlink" title="如果出错，则运行"></a>如果出错，则运行</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUST_BACKTRACE=full cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>可以查看到出错的堆栈</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用tokio实现出一个客户端程序<br>实现功能：</p><ol><li>连接到本地6142端口</li><li>发送字符串<code>hello world\n</code></li><li>检测是否发送成功并打印</li></ol><p>可能错误：<br>本地端口监听失败或还未监听，会出现错误：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread 'main' panicked <span class="keyword">at</span> 'called `Result::unwrap()` <span class="keyword">on</span> an `Err` value: Os &#123; code: <span class="number">61</span>, kind: ConnectionRefused, message: <span class="string">"Connection refused"</span> &#125;', src/main.rs:<span class="number">6</span>:<span class="number">22</span></span><br><span class="line">note: <span class="built_in">run</span> <span class="keyword">with</span> `RUST_BACKTRACE=<span class="number">1</span>` environment variable <span class="keyword">to</span> display a backtrace</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="tokio" scheme="https://www.oldcai.com/tags/tokio/"/>
    
  </entry>
  
  <entry>
    <title>微星MAG Z390 TOMAHAWK战斧导弹 + i5 9600kf EFI</title>
    <link href="https://www.oldcai.com/hackintosh/msi-mag-z390-tomahawk-i5-9600kf/"/>
    <id>https://www.oldcai.com/hackintosh/msi-mag-z390-tomahawk-i5-9600kf/</id>
    <published>2019-11-23T11:39:40.000Z</published>
    <updated>2019-11-26T15:59:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>适用系统版本：<code>10.15</code></p><p>下载地址：<br><a href="http://img.oldcai.com/EFIs/z390-i5-9600kf-EFI.zip" target="_blank" rel="noopener">直接下载</a> (不保证长期可以访问）</p><p><a href="https://pan.baidu.com/s/1WnyfbuVqHUSKE86SarLdQA" target="_blank" rel="noopener">百度网盘</a><br>提取码: rrdm</p><p>已解决问题：</p><ul><li>能正常关机</li><li>可睿频、可降频到最低1.1GHz。可能还能更低，未观察到</li><li>可正常屏幕睡眠</li><li>可正常休眠</li></ul><p>跑分结果：<br><a href="https://browser.geekbench.com/v5/cpu/653517" target="_blank" rel="noopener">https://browser.geekbench.com/v5/cpu/653517</a></p><p>CPU 观察工具：<a href="https://software.intel.com/en-us/articles/intel-power-gadget" target="_blank" rel="noopener">intel Power Gadget</a></p><p><img src="http://img.oldcai.com/mweb/15745123442971.jpg" alt></p><p>CPU Benchmark跑分工具：<a href="https://www.geekbench.com/" target="_blank" rel="noopener">Geekbench 5试用版</a></p><p>这个EFI，同样的主板(微星MAG Z390 TOMAHAWK战斧导弹)应该都能用。</p><p>碰到其他什么问题，可以留言讨论。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;适用系统版本：&lt;code&gt;10.15&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;br&gt;&lt;a href=&quot;http://img.oldcai.com/EFIs/z390-i5-9600kf-EFI.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;直接下载
      
    
    </summary>
    
      <category term="Mac" scheme="https://www.oldcai.com/categories/Mac/"/>
    
    
      <category term="EFI" scheme="https://www.oldcai.com/tags/EFI/"/>
    
  </entry>
  
  <entry>
    <title>小孩才分对错，大人只看利弊？</title>
    <link href="https://www.oldcai.com/random%20thoughts/difference-between-children-and-adults/"/>
    <id>https://www.oldcai.com/random thoughts/difference-between-children-and-adults/</id>
    <published>2019-09-12T11:00:50.000Z</published>
    <updated>2019-11-23T12:12:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直听人说，小孩才分对错，大人只看利弊。<br>仿佛突破道德伦常就能把幼稚给治疗了。</p><p>在我看来，大人对衡量标准应该是心智成熟。<br>心理和认知上不再幼稚。</p><p>具体来说，大人更注重事实，至少引用转发之前，更多地调查、证明，有自己对判断；<br>对现实有清晰的认知，不会经常颠覆认知，情绪更加稳定；<br>小孩什么都靠想象，情绪更容易煽动。</p><p>所以，有岁数了，也不一定是大人；<br>把判断对错的能力丢了，更像是小孩的行径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直听人说，小孩才分对错，大人只看利弊。&lt;br&gt;仿佛突破道德伦常就能把幼稚给治疗了。&lt;/p&gt;
&lt;p&gt;在我看来，大人对衡量标准应该是心智成熟。&lt;br&gt;心理和认知上不再幼稚。&lt;/p&gt;
&lt;p&gt;具体来说，大人更注重事实，至少引用转发之前，更多地调查、证明，有自己对判断；&lt;br&gt;对现
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>把cppjieba打包成了Docker镜像</title>
    <link href="https://www.oldcai.com/server/cppjieba-service/"/>
    <id>https://www.oldcai.com/server/cppjieba-service/</id>
    <published>2019-07-31T16:52:00.000Z</published>
    <updated>2020-04-25T06:10:11.354Z</updated>
    
    <content type="html"><![CDATA[<p>有需要的朋友，可以到<a href="https://hub.docker.com/repository/docker/oldcai/cppjieba-service" target="_blank" rel="noopener">dockerhub cppjieba-service页面</a>了解更多</p><p>使用方法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull oldcai/cppjieba-<span class="string">service:</span>latest</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p 8008:80 oldcai/cppjieba-service:latest</span></span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl 'localhost:<span class="number">8008</span>/?key=工信处女干事每月经过下属科室都要亲口交代24口交换机等技术性器件的安装工作'</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[<span class="string">"工信处"</span>, <span class="string">"女干事"</span>, <span class="string">"每月"</span>, <span class="string">"经过"</span>, <span class="string">"下属"</span>, <span class="string">"科室"</span>, <span class="string">"都"</span>, <span class="string">"要"</span>, <span class="string">"亲口"</span>, <span class="string">"交代"</span>, <span class="string">"2"</span>, <span class="string">"4"</span>, <span class="string">"口"</span>, <span class="string">"交换机"</span>, <span class="string">"等"</span>, <span class="string">"技术性"</span>, <span class="string">"器件"</span>, <span class="string">"的"</span>, <span class="string">"安装"</span>, <span class="string">"工作"</span>]</span><br></pre></td></tr></table></figure><p>有问题或者建议欢迎留言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有需要的朋友，可以到&lt;a href=&quot;https://hub.docker.com/repository/docker/oldcai/cppjieba-service&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dockerhub cppjieba-se
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="docker" scheme="https://www.oldcai.com/tags/docker/"/>
    
      <category term="自然语言" scheme="https://www.oldcai.com/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/"/>
    
      <category term="cpp" scheme="https://www.oldcai.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Remove Docker Images Older Than One week/month/year Automatically</title>
    <link href="https://www.oldcai.com/server/remove-old-docker-images/"/>
    <id>https://www.oldcai.com/server/remove-old-docker-images/</id>
    <published>2019-07-30T08:26:00.000Z</published>
    <updated>2019-07-30T10:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h2><p>I’m using rancher pipelines to deploy my service immediately after I push my code to GitHub, it always creates a new image but would never clean it.</p><p>I guess other continuous integration solutions would do the same.</p><p>Next, I’m going to share some lines of code on how to deal with it.</p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>Let’s say the project I’m going to build is named GetShitDone.</p><p>The way to clear old images is as simple as copy and paste the codes below.</p><blockquote><p>The images that are still in use would be protected and wouldn’t be removed.<br>It’s safe to use these commands.</p></blockquote><h3 id="Remove-images-older-than-one-week"><a href="#Remove-images-older-than-one-week" class="headerlink" title="Remove images older than one week"></a>Remove images older than one week</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project_name=GetShitDone</span><br><span class="line">docker images | <span class="type">grep</span> $&#123;project_name&#125; | <span class="type">grep</span> 'weeks ago\|<span class="type">months</span> ago\|<span class="type">years</span> ago' | <span class="type">awk</span> '&#123;print $<span class="number">3</span>&#125;'| <span class="type">xargs</span> docker rmi</span><br></pre></td></tr></table></figure><p>If you would like to keep the images for months or longer, you can remove the <code>weeks ago</code> and <code>months ago</code> part.</p><h3 id="Only-remove-images-earlier-than-one-month"><a href="#Only-remove-images-earlier-than-one-month" class="headerlink" title="Only remove images earlier than one month"></a>Only remove images earlier than one month</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project_name=GetShitDone</span><br><span class="line">docker images | <span class="type">grep</span> $&#123;project_name&#125; | <span class="type">grep</span> 'months ago\|<span class="type">years</span> ago' | <span class="type">awk</span> '&#123;print $<span class="number">3</span>&#125;'| <span class="type">xargs</span> docker rmi</span><br></pre></td></tr></table></figure><h3 id="And-clean-images-created-one-year-ago"><a href="#And-clean-images-created-one-year-ago" class="headerlink" title="And clean images created one year ago"></a>And clean images created one year ago</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project_name=GetShitDone</span><br><span class="line">docker images | <span class="keyword">grep</span> $&#123;project_name&#125; | <span class="keyword">grep</span> <span class="string">'years ago'</span> | awk <span class="string">'&#123;print $3&#125;'</span>| xargs docker rmi</span><br></pre></td></tr></table></figure><p>That’s all of it, cheers.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reason&quot;&gt;&lt;a href=&quot;#Reason&quot; class=&quot;headerlink&quot; title=&quot;Reason&quot;&gt;&lt;/a&gt;Reason&lt;/h2&gt;&lt;p&gt;I’m using rancher pipelines to deploy my service immed
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="CI" scheme="https://www.oldcai.com/tags/CI/"/>
    
      <category term="Docker" scheme="https://www.oldcai.com/tags/Docker/"/>
    
      <category term="Rancher" scheme="https://www.oldcai.com/tags/Rancher/"/>
    
      <category term="Kubernetes" scheme="https://www.oldcai.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Update Oh My Zsh Automatically Using Crontab</title>
    <link href="https://www.oldcai.com/server/auto-update-on-my-zsh/"/>
    <id>https://www.oldcai.com/server/auto-update-on-my-zsh/</id>
    <published>2019-02-19T18:29:00.000Z</published>
    <updated>2019-03-02T22:08:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h2><p>Oh My Zsh is a cool zsh configuration set, and it’s very active, updates the code base quite often, which is good.</p><p>But when sometimes we are eager to change the world, it still asks us to update it first. That would be a little bit boring after doing these for several times.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>We can update Oh My Zsh by adding this line below to crontab.</p><p><code>0    3    *    *    *    zsh -c &#39;DISABLE_AUTO_UPDATE=true &amp;&amp; export ZSH=$HOME/.oh-my-zsh &amp;&amp; source $ZSH/oh-my-zsh.sh &amp;&amp; upgrade_oh_my_zsh 2&gt;&amp;1&#39; &gt;&gt; /dev/null</code></p><p>Normally, crontab can be modified by command <code>crontab -e</code></p><p><code>DISABLE_AUTO_UPDATE=true</code></p><p>After all, we can add the line above to <code>.zshrc</code> to forbid Oh My Zsh asks us for update.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reason&quot;&gt;&lt;a href=&quot;#Reason&quot; class=&quot;headerlink&quot; title=&quot;Reason&quot;&gt;&lt;/a&gt;Reason&lt;/h2&gt;&lt;p&gt;Oh My Zsh is a cool zsh configuration set, and it’s ve
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="zsh" scheme="https://www.oldcai.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Filebeat Not Able to Connect to Logstash</title>
    <link href="https://www.oldcai.com/server/logstash-filebeat-cert/"/>
    <id>https://www.oldcai.com/server/logstash-filebeat-cert/</id>
    <published>2018-12-13T22:35:00.000Z</published>
    <updated>2018-12-14T07:17:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Possible-Errors"><a href="#Possible-Errors" class="headerlink" title="Possible Errors:"></a>Possible Errors:</h2><ul><li>Failed to connect to backoff(async(tcp://10.10.10.1:5044)): x509: certificate is valid for 127.0.0.1, not 10.10.10.1</li><li>x509: cannot validate certificate for <code>127.0.0.1</code> because it doesn’t contain any IP SANs</li></ul><h2 id="Step-1-Add-subjectAltName"><a href="#Step-1-Add-subjectAltName" class="headerlink" title="Step 1 - Add subjectAltName"></a>Step 1 - Add subjectAltName</h2><p>Add the line below into file <code>/etc/pki/tls/openssl.cnf</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subjectAltName = <span class="built_in">IP</span>: <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span></span><br></pre></td></tr></table></figure><p>You can change the ip address to your logstash server address</p><h2 id="Step-2-Regenerate-Certification"><a href="#Step-2-Regenerate-Certification" class="headerlink" title="Step 2 - Regenerate Certification"></a>Step 2 - Regenerate Certification</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -config <span class="regexp">/etc/</span>pki<span class="regexp">/tls/</span>openssl.cnf -x509 -days <span class="number">3650</span> -batch -nodes -newkey <span class="string">rsa:</span><span class="number">2048</span> -keyout <span class="regexp">/etc/</span>pki<span class="regexp">/tls/</span><span class="keyword">private</span><span class="regexp">/logstash-forwarder.key -out /</span>etc<span class="regexp">/pki/</span>tls<span class="regexp">/certs/</span>logstash-forwarder.crt</span><br></pre></td></tr></table></figure><p>Then you can use the cert file <code>/etc/pki/tls/certs/logstash-forwarder.crt</code> to authorize filebeat to connect to logstash.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Possible-Errors&quot;&gt;&lt;a href=&quot;#Possible-Errors&quot; class=&quot;headerlink&quot; title=&quot;Possible Errors:&quot;&gt;&lt;/a&gt;Possible Errors:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Failed to 
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="ELK" scheme="https://www.oldcai.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Better Way to Migrate an In-Production PostgreSQL Database to a Different Data Center or Cloud</title>
    <link href="https://www.oldcai.com/server/large-postgresql-database-migration/"/>
    <id>https://www.oldcai.com/server/large-postgresql-database-migration/</id>
    <published>2018-11-27T17:05:00.000Z</published>
    <updated>2019-12-23T18:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>To practice this guide, PostgreSQL version should be at least 9.6</code></pre><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR:"></a>TL;DR:</h2><p>First, setup a master-slave replication for PostgreSQL.<br>Then switch the slave server to master.</p><h2 id="Longer-Story"><a href="#Longer-Story" class="headerlink" title="Longer Story"></a>Longer Story</h2><h3 id="Situation"><a href="#Situation" class="headerlink" title="Situation"></a>Situation</h3><p>In our case, the database is almost 300GB, it would take at least 3 hours to migrate to a new server, including export, transfer and import time.</p><p>Sometimes, it’s acceptable to shutdown sites or apps for a short time to do some maintain, but what if the data grows and the migration may takes days or weeks?</p><p>For services in-production, you would expect it always online.</p><p>Yes, we hope we can keep the service online while transferring data and switch it in minutes.</p><h3 id="Struggles"><a href="#Struggles" class="headerlink" title="Struggles"></a>Struggles</h3><p>I have checked <a href="https://www.howtoforge.com/tutorial/how-to-set-up-master-slave-replication-for-postgresql-96-on-ubuntu-1604/" target="_blank" rel="noopener">How to Set-Up Master-Slave Replication for PostgreSQL 9.6 on Ubuntu 16.04</a> and tried many times of making replicas on the new server but always fail.<br>It reports the same error: <code>requested WAL segment 00000001000001CD00000055 has already been removed</code> every time.</p><p>After did some research and I found that’s because my database is too large, transfer would take too much time, and the <code>wal_keep_segments</code> is not enough for that long time of transferring files.</p><h3 id="Quick-Fix"><a href="#Quick-Fix" class="headerlink" title="Quick Fix"></a>Quick Fix</h3><p>Maybe it can be fixed by increasing <code>wal_keep_segments</code> to a greater number, but that introduces another problem: we need to calculate the proper number, enough keeping WAL files after the long and unsure time of data transferring, and not too big that would slow down the running service.<br>Of course, that’s not <strong>the best solution</strong>.</p><h3 id="Better-Solutions"><a href="#Better-Solutions" class="headerlink" title="Better Solutions"></a>Better Solutions</h3><p>Later, I found a more reliable and more robust solution <a href="https://www.postgresql.org/message-id/8154f0c1-5ac3-8769-d0b6-81c65c666dd7%40dalibo.com" target="_blank" rel="noopener">in PostgreSQL’s mail list</a>:</p><blockquote><p>You could use <code>-X stream</code> instead of <code>--xlog</code> (which is an alias for <code>-X fetch</code>). This consumes two wal senders instead of one, but greatly reduce the probability of having this error.<br>The only way to really prevent this error is using replication slots, but the support for pg_basebackup is only available in 9.6.</p></blockquote><p>I would show you how to use <code>replication slots</code> and use stream to transfer the transaction log files(WAL files) below.</p><h2 id="Step-1-Enable-Replication-Slots"><a href="#Step-1-Enable-Replication-Slots" class="headerlink" title="Step 1 - Enable Replication Slots"></a>Step 1 - Enable Replication Slots</h2><p>PostgreSQL disabled replication slots by default, we need to setup by adding lines to the bottom of <code>/var/lib/pgsql/9.6/data/postgresql.conf</code> below:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">synchronous_standby_names</span> = <span class="string">'slave001'</span></span><br><span class="line"><span class="attr">wal_level</span> = replica</span><br><span class="line"><span class="attr">hot_standby</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">max_wal_senders</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">wal_keep_segments</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">max_replication_slots</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">synchronous_commit</span> = local</span><br></pre></td></tr></table></figure><p>Then restart the PostgreSQL service by <code>service postgresql-9.6 restart</code>.</p><h2 id="Step-2-Creating-a-Replication-Slot"><a href="#Step-2-Creating-a-Replication-Slot" class="headerlink" title="Step 2 - Creating a Replication Slot"></a>Step 2 - Creating a Replication Slot</h2><p>Connect to master PostgreSQL by <code>sudo -u postgres psql</code><br>Then execute<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">pg_create_physical_replication_slot</span>(<span class="params"><span class="string">'slot_for_migration'</span>, <span class="literal">true</span></span>)</span>;</span><br></pre></td></tr></table></figure></p><p>We can check the progress by selecting:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_replication_slots;</span><br></pre></td></tr></table></figure></p><p>If you want to delete this slot later after migration, you can use this command:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'select pg_drop_replication_slot('slot_for_migration')<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>Use it after remove the initial prime if you know what this command would do.</p><h2 id="Step-3-Create-a-User-for-Replication"><a href="#Step-3-Create-a-User-for-Replication" class="headerlink" title="Step 3 - Create a User for Replication"></a>Step 3 - Create a User for Replication</h2><p>Run commands with psql as user postgres on the master side:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> replica <span class="keyword">REPLICATION</span> LOGIN ENCRYPTED <span class="keyword">PASSWORD</span> <span class="string">'your password here'</span>;</span><br></pre></td></tr></table></figure><p>Add these lines below to master’s pg_hba.conf</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Localhost</span><br><span class="line">host    replication     replica          <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span>              md5</span><br><span class="line"> </span><br><span class="line"># PostgreSQL Master IP address</span><br><span class="line">host    replication     replica          <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span>/<span class="number">32</span>            md5</span><br><span class="line"> </span><br><span class="line"># PostgreSQL SLave IP address</span><br><span class="line">host    replication     replica          <span class="number">10.10</span><span class="number">.10</span><span class="number">.11</span>/<span class="number">32</span>            md5</span><br></pre></td></tr></table></figure><p>Then restart the PostgreSQL server.</p><h2 id="Step-4-Transfer-Data-From-Another-Data-Center"><a href="#Step-4-Transfer-Data-From-Another-Data-Center" class="headerlink" title="Step 4 - Transfer Data From Another Data Center"></a>Step 4 - Transfer Data From Another Data Center</h2><p>Now, run on the slave server:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_basebackup -h <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span> -p <span class="number">5432</span> -S slot_for_migration -U replica -D /var/lib/pgsql/<span class="number">9.6</span>/data --checkpoint=fast -R -P -X stream</span><br></pre></td></tr></table></figure></p><p>It would ask you to type password.<br>Now, you need to wait until it finishes syncing. This step is very time consuming, usually takes hours or even days.</p><h2 id="Step-5-Restart-The-Slave-PostgreSQL-Server"><a href="#Step-5-Restart-The-Slave-PostgreSQL-Server" class="headerlink" title="Step 5 - Restart The Slave PostgreSQL Server"></a>Step 5 - Restart The Slave PostgreSQL Server</h2><p>After syncing finished, run <code>service postgresql-9.6 restart</code>, there should be a sync before the standby server up and run, wouldn’t take too much time if you didn’t leave the console too long after step 4.</p><p>We are almost there. Now, we can connect to the server by psql and do some check, make sure our data are the latest.</p><h2 id="Step-6-Promote-the-Slave-to-Master-Like-a-King"><a href="#Step-6-Promote-the-Slave-to-Master-Like-a-King" class="headerlink" title="Step 6 - Promote the Slave to Master Like a King"></a>Step 6 - Promote the Slave to Master Like a King</h2><p>Finally, we still need to promote our slave postgresql server to master before we finish our database migration.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl <span class="literal">promote</span> -D</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;To practice this guide, PostgreSQL version should be at least 9.6
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="Server" scheme="https://www.oldcai.com/categories/Server/"/>
    
    
      <category term="postgresql" scheme="https://www.oldcai.com/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>atop DSK 示数的含义，帮你捋一捋</title>
    <link href="https://www.oldcai.com/linux/atop-dsk/"/>
    <id>https://www.oldcai.com/linux/atop-dsk/</id>
    <published>2018-10-27T10:50:52.000Z</published>
    <updated>2018-10-28T03:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次介绍了<a href="/linux/atop/">atop在定位服务器瓶颈、调查宕机事件</a>上的作用，今天再来具体看看 DSK 示数的含义，</p><h2 id="一个悲伤的故事"><a href="#一个悲伤的故事" class="headerlink" title="一个悲伤的故事"></a>一个悲伤的故事</h2><p>前天，公司服务器一周内第5次宕机!!!</p><p>苦苦找寻原因的老蔡，天天盯着各种监控程序百思不得其解，<br>很巧合地，这次宕机的时候，老蔡正巧在服务器上面用atop盯着监控，于是捕捉到了宕机的那一刻的异常，如下图所示。</p><table><thead><tr><th style="text-align:center"><a href="/images/2018/10/ali-atop-busy.jpg"><img src="/images/2018/10/ali-atop-busy.jpg" alt="DSK繁忙示例"></a></th></tr></thead><tbody><tr><td style="text-align:center"><strong>点击可看大图</strong></td></tr></tbody></table><p>可以说，如果早知道atop里面DSK的具体含义，说不定前天就已经“破案”了。<br>可惜老蔡刚开始对这个示数也只有个大致的认知，只知道数字越大就说明读写越高，而具体<code>read</code>和<code>write</code>表示的什么，以及单位是什么，却是不知。<br>还以为是为了紧凑，把明显的KB/s或者MB/s去掉了。<br><a id="more"></a></p><p>那么下面具体来讲解讲解这幅图里面的数值和含义吧</p><h2 id="DSK示数解读"><a href="#DSK示数解读" class="headerlink" title="DSK示数解读"></a>DSK示数解读</h2><table><thead><tr><th style="text-align:center">示数</th><th style="text-align:center">含义</th><th style="text-align:center">例子解读</th></tr></thead><tbody><tr><td style="text-align:center"><strong>vda</strong></td><td style="text-align:center">盘符</td><td style="text-align:center">例子中是系统盘</td></tr><tr><td style="text-align:center"><strong>busy 100%</strong></td><td style="text-align:center">平时是硬盘繁忙情况的百分比</td><td style="text-align:center">磁盘io满了</td></tr><tr><td style="text-align:center"><strong>read 27</strong></td><td style="text-align:center">每秒读取请求的数量</td><td style="text-align:center">每秒27次</td></tr><tr><td style="text-align:center"><strong>write 9</strong></td><td style="text-align:center">每秒写的请求数量</td><td style="text-align:center">每秒9次</td></tr><tr><td style="text-align:center"><strong>KiB/r 4</strong></td><td style="text-align:center">每次读请求所读取的文件大小的平均值</td><td style="text-align:center">4k随机读为主</td></tr><tr><td style="text-align:center"><strong>KiB/w 29</strong></td><td style="text-align:center">每次写请求写的文件大小平均值</td><td style="text-align:center">每次平均写29kB</td></tr><tr><td style="text-align:center"><strong>Mbr/s 0.0</strong></td><td style="text-align:center">每秒读盘的吞吐量</td><td style="text-align:center">四舍五入为0了</td></tr><tr><td style="text-align:center"><strong>Mbw/s 0.0</strong></td><td style="text-align:center">每秒写入的吞吐量</td><td style="text-align:center">同上</td></tr><tr><td style="text-align:center"><strong>avq 1.01</strong></td><td style="text-align:center">平均磁盘读写队列长度</td><td style="text-align:center">1.01个，说明读写不重</td></tr><tr><td style="text-align:center"><strong>avio 278ms</strong></td><td style="text-align:center">平均每个读写请求需要的时间</td><td style="text-align:center">硬盘读写延迟<code>278ms</code>，对于单次io等待，可以说是很高了</td></tr></tbody></table><p>而老蔡刚开始的时候以为是自己的程序磁盘占用太多，把读写单位当做<code>MB/s</code>来理解。<br>现在明白真正该怀疑是什么问题后，才恍然大悟——之前的解读是错的。<br>那么，机智的你，猜到是什么原因导致的宕机了吗？欢迎留言哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次介绍了&lt;a href=&quot;/linux/atop/&quot;&gt;atop在定位服务器瓶颈、调查宕机事件&lt;/a&gt;上的作用，今天再来具体看看 DSK 示数的含义，&lt;/p&gt;
&lt;h2 id=&quot;一个悲伤的故事&quot;&gt;&lt;a href=&quot;#一个悲伤的故事&quot; class=&quot;headerlink&quot; title=&quot;一个悲伤的故事&quot;&gt;&lt;/a&gt;一个悲伤的故事&lt;/h2&gt;&lt;p&gt;前天，公司服务器一周内第5次宕机!!!&lt;/p&gt;
&lt;p&gt;苦苦找寻原因的老蔡，天天盯着各种监控程序百思不得其解，&lt;br&gt;很巧合地，这次宕机的时候，老蔡正巧在服务器上面用atop盯着监控，于是捕捉到了宕机的那一刻的异常，如下图所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/images/2018/10/ali-atop-busy.jpg&quot;&gt;&lt;img src=&quot;/images/2018/10/ali-atop-busy.jpg&quot; alt=&quot;DSK繁忙示例&quot;&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;点击可看大图&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以说，如果早知道atop里面DSK的具体含义，说不定前天就已经“破案”了。&lt;br&gt;可惜老蔡刚开始对这个示数也只有个大致的认知，只知道数字越大就说明读写越高，而具体&lt;code&gt;read&lt;/code&gt;和&lt;code&gt;write&lt;/code&gt;表示的什么，以及单位是什么，却是不知。&lt;br&gt;还以为是为了紧凑，把明显的KB/s或者MB/s去掉了。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.oldcai.com/categories/linux/"/>
    
      <category term="服务器运维" scheme="https://www.oldcai.com/categories/linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="atop" scheme="https://www.oldcai.com/tags/atop/"/>
    
  </entry>
  
  <entry>
    <title>Run rsync Service Only When Needed By Using xinetd</title>
    <link href="https://www.oldcai.com/linux/rsync-via-xinetd/"/>
    <id>https://www.oldcai.com/linux/rsync-via-xinetd/</id>
    <published>2018-10-24T13:33:00.000Z</published>
    <updated>2018-10-24T17:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-Not-Use-Rsyncd-Service-Directly"><a href="#Why-Not-Use-Rsyncd-Service-Directly" class="headerlink" title="Why Not Use Rsyncd Service Directly"></a>Why Not Use Rsyncd Service Directly</h2><p>We do not need <code>rsyncd</code> keep running and cost our precious memory, in fact most of us only use it once in a while for backup.</p><p>So we need a way to keep our sync service on without the <code>rsyncd</code> process.</p><h2 id="What-Is-Xinetd"><a href="#What-Is-Xinetd" class="headerlink" title="What Is Xinetd"></a>What Is Xinetd</h2><p><code>xinetd</code> is a service that can open network based services only when they are connected.</p><p>When <code>xinetd</code> listens to a port, while the traffic comes in, <code>xinetd</code> could launch the real service program and transfer traffic to it.</p><h2 id="How-to-Config-xinetd-Work-With-rsync"><a href="#How-to-Config-xinetd-Work-With-rsync" class="headerlink" title="How to Config xinetd Work With rsync"></a>How to Config xinetd Work With rsync</h2><p>We can create a file <code>/etc/xinetd.d/rsync</code> filled with codes below.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">service rsync</span><br><span class="line">&#123;</span><br><span class="line">        <span class="builtin-name">disable</span>         = <span class="literal">no</span></span><br><span class="line">        socket_type     = stream</span><br><span class="line">        wait            = <span class="literal">no</span></span><br><span class="line">       <span class="built_in"> user </span>           = rsync</span><br><span class="line">       <span class="built_in"> server </span>         = /usr/bin/rsync</span><br><span class="line">        server_args     = --daemon</span><br><span class="line">        log_on_failure  += USERID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips:</p><blockquote><p>Other configs in <code>/etc/rsyncd.conf</code> and <code>/etc/rsyncd.pass</code> are just like what they were when you are using <code>rsyncd</code> service.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why-Not-Use-Rsyncd-Service-Directly&quot;&gt;&lt;a href=&quot;#Why-Not-Use-Rsyncd-Service-Directly&quot; class=&quot;headerlink&quot; title=&quot;Why Not Use Rsyncd Ser
      
    
    </summary>
    
      <category term="linux" scheme="https://www.oldcai.com/categories/linux/"/>
    
    
      <category term="xinetd" scheme="https://www.oldcai.com/tags/xinetd/"/>
    
      <category term="rsync" scheme="https://www.oldcai.com/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>WordPress 转 Hexo 后，回车变成空格的问题解决</title>
    <link href="https://www.oldcai.com/hexo/wordpress-to-hexo-lose-return/"/>
    <id>https://www.oldcai.com/hexo/wordpress-to-hexo-lose-return/</id>
    <published>2018-10-22T15:45:13.000Z</published>
    <updated>2018-10-23T17:00:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚从 WordPress 转到 Hexo 的时候，很多文章文字都挤在一团，很不方便阅读。</p><h2 id="替换代码："><a href="#替换代码：" class="headerlink" title="替换代码："></a>替换代码：</h2><figure class="highlight bash"><figcaption><span>空格替换回回车</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -d <span class="built_in">source</span>/_posts/archives/* | xargs perl -pi -e <span class="string">'s|(?&lt;!^)(?&lt;![~`!@#$%^&amp;*()\-_=+\\\|.,&lt;&gt;/?;: #\w\d]) |\n\n|g'</span></span><br></pre></td></tr></table></figure><p>运行上面代码，再稍微整理一下，就好看多了。</p><p>因为替换时的正则表达式用到了<a href="/hexoprograming/regex/">零宽正回顾断言</a>，所以，并不会影响英文和代码的正常显示。</p><p>但是，不管怎样，还是要记得先把文章备份。</p><h3 id="替换前："><a href="#替换前：" class="headerlink" title="替换前："></a>替换前：</h3><p><img src="/images/2018/10/content-no-return.jpg" alt="从WordPress导入过来的没回车的文章"></p><h3 id="替换后："><a href="#替换后：" class="headerlink" title="替换后："></a>替换后：</h3><p><img src="/images/2018/10/content-with-return.jpg" alt="替换好回车的文章"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚从 WordPress 转到 Hexo 的时候，很多文章文字都挤在一团，很不方便阅读。&lt;/p&gt;
&lt;h2 id=&quot;替换代码：&quot;&gt;&lt;a href=&quot;#替换代码：&quot; class=&quot;headerlink&quot; title=&quot;替换代码：&quot;&gt;&lt;/a&gt;替换代码：&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
      <category term="解决" scheme="https://www.oldcai.com/categories/%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="WordPress" scheme="https://www.oldcai.com/tags/WordPress/"/>
    
      <category term="博客" scheme="https://www.oldcai.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://www.oldcai.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式进阶，零宽正回顾断言，零宽负回顾断言</title>
    <link href="https://www.oldcai.com/programing/regex/"/>
    <id>https://www.oldcai.com/programing/regex/</id>
    <published>2018-10-21T13:19:01.000Z</published>
    <updated>2018-10-27T12:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>零宽断言，表示匹配字符的时候再添加一些定位条件，使匹配更精准，但又不匹配到字符串。</p><table><thead><tr><th style="text-align:center">举例</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>\w+(?=ing)</code></td><td style="text-align:center">匹配以ing结尾的单词前缀（不包括ing），<code>talking</code>匹配到<code>talk</code></td></tr><tr><td style="text-align:center"><code>\w+(?!ing)</code></td><td style="text-align:center">匹配不是以ing结尾的多个字符，<code>do talking</code>匹配到<code>do</code></td></tr><tr><td style="text-align:center"><code>(?&lt;=re)\w+</code></td><td style="text-align:center">匹配以re开头的多个字符（不包括re），<code>redo</code>匹配到<code>do</code></td></tr><tr><td style="text-align:center"><code>(?&lt;!re)\w+</code></td><td style="text-align:center">匹配排除re开头的单词外的其他单词，<code>refreshing wether</code>匹配到<code>weather</code></td></tr></tbody></table><p>组合起来使用<br><code>(?&lt;=\s)\d+(?=\s)</code> 匹配两边是空白符的数字，不包括空白符，相当于Vim中在单词上按下<code>*</code>号的结果</p><p>另外，推荐一个测试正则表达式的网站: <a href="https://regexr.com/" target="_blank" rel="noopener">Regexr</a><br>regex，是正则regular expression的缩写，加上r就当是被正则坑的人的意思吧😂</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;零宽断言，表示匹配字符的时候再添加一些定位条件，使匹配更精准，但又不匹配到字符串。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;举例&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;解释
      
    
    </summary>
    
      <category term="编程" scheme="https://www.oldcai.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="代码高亮" scheme="https://www.oldcai.com/tags/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/"/>
    
  </entry>
  
  <entry>
    <title>弃用 WordPress，对比 Ghost 后改用 Hexo</title>
    <link href="https://www.oldcai.com/hexo/migrate-to-hexo/"/>
    <id>https://www.oldcai.com/hexo/migrate-to-hexo/</id>
    <published>2018-10-21T04:45:13.000Z</published>
    <updated>2018-10-23T15:38:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并不骄傲地使用着WordPress"><a href="#并不骄傲地使用着WordPress" class="headerlink" title="并不骄傲地使用着WordPress"></a>并不骄傲地使用着WordPress</h2><p>转到 Hexo 后，翻看之前的档案，发现从2011年搭建 WordPress 开始，到现在已经第八个年头了。</p><p>在这段时间里，WordPress日渐臃肿，以至于对CPU和内存的要求越来越高，而新的博客系统层出不穷，早就有想法更换到某个其他博客系统了。<br>但是因为忙，总是没抽出空来，而今天收到IDC的通知，原VPS马上就要到期，而我又不想继续租用，就还是免不了迁移。</p><h2 id="选择博客系统"><a href="#选择博客系统" class="headerlink" title="选择博客系统"></a>选择博客系统</h2><p>一直以来，老蔡心仪的博客系统有好几个，</p><p>主要分为</p><ul><li>静态 Hexo/Jekyll/Octopress</li><li>动态 Ghost</li></ul><h3 id="静态的选择"><a href="#静态的选择" class="headerlink" title="静态的选择"></a>静态的选择</h3><p>静态博客系统中，Hexo比较晚一点，<br>但是基于Node.js，性能较ruby好，社区也算活跃，所以静态里面选择了站队Hexo</p><h3 id="动态还是静态"><a href="#动态还是静态" class="headerlink" title="动态还是静态"></a>动态还是静态</h3><p>于是老蔡纠结在了Hexo和Ghost选择中</p><p>说实话，Ghost的模板很多都特别有设计感，而且对SEO特别友善，但是出于以下几点考虑，就还是选择了Hexo</p><ul><li>静态博客可以托管第三方，如 Github Pages 和 Coding Pages，节省打理服务器时间</li><li>自然也节省了服务器开销</li><li>不用自己做备份，用git管理文档也更容易回溯历史版本</li><li>静态页面，即使第三方停止服务，也方便找到新的地方部署，不用打包数据库，折腾配置，再迁移到新服务器</li><li>很多人买主机都是讲年的，说不定哪天就忘了，又懒得写，一年打不开都没发现</li></ul><p>性能倒不是我考虑的问题，毕竟 Ghost 的性能也足够高了，不过要硬杠的话，确实静态的性能更好，也更容易用 CDN 分发。</p><h2 id="Ghost-的几点好处"><a href="#Ghost-的几点好处" class="headerlink" title="Ghost 的几点好处"></a>Ghost 的几点好处</h2><p>最后，也列举一下 Ghost 的优点，或许大点的团队更适合它。</p><ul><li>设计感超好的免费、付费模板一大把，比起来，Hexo 的模板像是上个世纪的</li><li>SEO 功能完善，在设计之初就把 SEO 考虑在内的博客系统并不多见</li><li>功能强大很多，GitHub 上 commits 是 Hexo 的 4 倍，功能至少多一倍吧</li><li>社区更活跃，几乎每天都有大量代码提交</li><li>有良好的商业模式支撑，开发、维护的生命期可以更久</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;并不骄傲地使用着WordPress&quot;&gt;&lt;a href=&quot;#并不骄傲地使用着WordPress&quot; class=&quot;headerlink&quot; title=&quot;并不骄傲地使用着WordPress&quot;&gt;&lt;/a&gt;并不骄傲地使用着WordPress&lt;/h2&gt;&lt;p&gt;转到 Hexo 后，
      
    
    </summary>
    
      <category term="对比" scheme="https://www.oldcai.com/categories/%E5%AF%B9%E6%AF%94/"/>
    
    
      <category term="WordPress" scheme="https://www.oldcai.com/tags/WordPress/"/>
    
      <category term="博客" scheme="https://www.oldcai.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://www.oldcai.com/tags/Hexo/"/>
    
      <category term="Ghost" scheme="https://www.oldcai.com/tags/Ghost/"/>
    
  </entry>
  
  <entry>
    <title>atop，调查服务器宕机事件的神器</title>
    <link href="https://www.oldcai.com/linux/atop/"/>
    <id>https://www.oldcai.com/linux/atop/</id>
    <published>2018-10-20T09:44:52.000Z</published>
    <updated>2018-10-27T12:24:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前服务器偶尔故障，SSH连不上，只能在IDC的后台去重启机器。这就使得调查导致问题的原因变得十分困难。</p><p>于是老蔡查阅“中外典籍”，找到了这个神器：atop atop不仅平时可以帮你自动高亮异常负载（CPU，内存，磁盘，网络），还能每隔15分钟存个档，重启后可以调出来看案发现场是哪个进程出了故障。</p><h2 id="定时保存服务器资源负载数据"><a href="#定时保存服务器资源负载数据" class="headerlink" title="定时保存服务器资源负载数据"></a>定时保存服务器资源负载数据</h2><p><img src="/images/2018/10/memory.jpeg" alt></p><p>这是老蔡在刚刚不久前通过atop定期记录服务器负载这个功能定位到的一个很低概率发生的内存泄漏导致服务器死机的现场还原截图。</p><p>atop默认有个服务，启动服务后，每15分钟存档一次，以天为单位保存成文件。</p><p>真相永远只有一个，各位新一姬，还原犯罪现场，找出杀死服务器的真凶吧。</p><p>service atop restart</p><p>启动atop记录服务</p><p>atop -r /var/log/atop/atop_20181019</p><p>通过这条命令来查阅记录，进入后，t是下一页，T是上一页，每一页15分钟间隔。</p><h2 id="atop还能自动高亮服务器性能瓶颈"><a href="#atop还能自动高亮服务器性能瓶颈" class="headerlink" title="atop还能自动高亮服务器性能瓶颈"></a>atop还能自动高亮服务器性能瓶颈</h2><p><img src="/images/2018/10/io.jpeg" alt> 拿一台磁盘IO基本已经快到顶的服务器举例，atop会自动标红DSK的busy程度。</p><p>以往我们排查问题的时候，可能会需要用各种工具查看，比如htop，iotop，iostat，nload，iftop，等等，最后过了半个小时说不定才可以找到问题（还看经验是否丰富），而用atop可以轻松察觉。</p><h2 id="深入了解atop"><a href="#深入了解atop" class="headerlink" title="深入了解atop"></a>深入了解atop</h2><p><a href="/linux/atop-dsk/">atop磁盘的DSK后面的数字都代表什么</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前服务器偶尔故障，SSH连不上，只能在IDC的后台去重启机器。这就使得调查导致问题的原因变得十分困难。&lt;/p&gt;
&lt;p&gt;于是老蔡查阅“中外典籍”，找到了这个神器：atop atop不仅平时可以帮你自动高亮异常负载（CPU，内存，磁盘，网络），还能每隔15分钟存个档，重启后可
      
    
    </summary>
    
      <category term="linux" scheme="https://www.oldcai.com/categories/linux/"/>
    
      <category term="服务器运维" scheme="https://www.oldcai.com/categories/linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
      <category term="软件评测" scheme="https://www.oldcai.com/categories/linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B/"/>
    
    
      <category term="atop" scheme="https://www.oldcai.com/tags/atop/"/>
    
  </entry>
  
  <entry>
    <title>更大的标尺</title>
    <link href="https://www.oldcai.com/archives/1217/"/>
    <id>https://www.oldcai.com/archives/1217/</id>
    <published>2018-06-29T17:51:40.000Z</published>
    <updated>2018-10-23T14:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>以百年为标尺</strong><br>往回看，中国的历史上，文化是最清晰的脉络。<br>商周的诗经，先秦的诸子百家，到唐宋的诗词，都是一个个刻度。</p><p><strong>以光年为标尺</strong></p><p>放到整个宇宙，文明，是我们最在意的标尺。<br>产生生物，石器，铁器，工业，热核，星际文明……</p><p><strong>善政恶政</strong></p><p>政体的好坏，看它是否能过滤出好的政策，并持续地贯彻政策。<br>政策的善恶，看它是否能在大的标尺上向人类终极目标迈进。<br>假设，<br>剔除掉无效政策，每个政策要么推进文明，要么让文明倒退。<br>最好的政体形式，出现推进文明的政策概率为1<br>最坏的政体形式，出现倒退文明的政策概率为1<br>每个政体出新政的速度都一致</p><p>恶政比率&gt;50%的政体形式，最终必然消亡，时间长短看运气。<br>而善政比率&gt;50%的才有更高概率让文明发展，进而存在得更久。</p><p><strong>观测</strong><br>这个模型，在不量化文明指标的情况下，外界能观察到，最直观的就是政权能持续时间长度。</p><p><strong>比较</strong><br>被批的最多的封建社会，<br>统计学上去掉最长的周朝800年，<br>唐宋明清，文明交融、科技发展，社会发展变快，但也都差不多有300年；<br>再看看<br>目前为止，最长寿的，苏联存在总共才多少年？69年。<br>红色高棉，31年；<br>东德，41年。<br>比起封建社会，还差了个数量级。<br>当然，明年（2019）开始，最长寿的就换人了，如果不承认改革开放已经改变了政体的话。<br>又算了算，距离英国君主立宪到现在，刚好330年了。<br>虽然不是理想状态中善政率100%的最好的政体形式，但这330年里，从这一支文明里分出来的枝干一直在带领整个人类文明飞速发展。</p><p>最后，引用一句他们的前首相在上个世纪说的一句话：<br>Democracy is the worst form of government, except for all the others.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;以百年为标尺&lt;/strong&gt;&lt;br&gt;往回看，中国的历史上，文化是最清晰的脉络。&lt;br&gt;商周的诗经，先秦的诸子百家，到唐宋的诗词，都是一个个刻度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以光年为标尺&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;放到整个宇宙，文明，是我们最在意的
      
    
    </summary>
    
      <category term="思考" scheme="https://www.oldcai.com/categories/%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>VS Code运行golang报错Process exiting with code: null的解决办法</title>
    <link href="https://www.oldcai.com/archives/1205/"/>
    <id>https://www.oldcai.com/archives/1205/</id>
    <published>2017-12-15T06:39:48.000Z</published>
    <updated>2018-10-23T14:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2017/12/golang-exiting-null.png" alt></p><p>早前一直用<a href="http://go-ide.com/" target="_blank" rel="noopener">go-ide</a>写golang。最近JetBrains出了GoLand，于是就自动把go-ide不兼容新版本IDE了。<br>老蔡又有点舍不得买JetBrains一年几千块的全家桶，于是想试试Visual Studio Code，写写平时只是玩玩的golang和nodejs。<br>但是就碰到了如图所示的情况——一个简单的hello world都遇到了问题——提示<code>Process exiting with code: null</code>。</p><p>这时，可以验证一下是否是golang的调试器dlv出了问题，验证方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv -h</span><br></pre></td></tr></table></figure><p>如果和老蔡这边碰到的情况一样，会返回结果：`[1]</p><p>34378 killed`</p><p>明确了原因，就容易对症下药了。</p><p>如果是在Mac下，我们运行如下命令：</p><figure class="highlight bash"><figcaption><span>Mac安装delve</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew install go-delve/delve/delve</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/derekparker</span><br><span class="line">rm -rf delve/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/derekparker/delve</span><br><span class="line"><span class="built_in">cd</span> delve</span><br><span class="line">CERT=dlv-cert make install</span><br></pre></td></tr></table></figure><p>如果不报错，再次检测一下<code>dlv -h</code>，一切顺利的话，就能回VS Code里面愉快地按F5了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2017/12/golang-exiting-null.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;早前一直用&lt;a href=&quot;http://go-ide.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;go-ide&lt;/a
      
    
    </summary>
    
      <category term="编程" scheme="https://www.oldcai.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="golang" scheme="https://www.oldcai.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>WordPress 4 怎样悬挂备案号</title>
    <link href="https://www.oldcai.com/archives/1200/"/>
    <id>https://www.oldcai.com/archives/1200/</id>
    <published>2017-12-12T10:17:31.000Z</published>
    <updated>2018-10-23T14:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>老蔡正在使用WordPress 4.9.1，试了网上很多办法都无法正常让备案号显示在页脚，而备案托管方坚持不能把备案号放在网站友情链接中，于是自己折腾着解决了。</p><p>做到显示备案号2步即可完成。</p><ol><li>来到WordPress根目录，比如<code>/var/www/blog</code> 2. 然后，修改文件</li></ol><blockquote><p>./wp-content/themes/twentyseventeen/template-parts/footer/site-info.php</p></blockquote><p>原文件如下：</p><figure class="highlight php"><figcaption><span>找到以下代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">/\*\*</span><br><span class="line"> \* Displays footer site info</span><br><span class="line"> \*</span><br><span class="line"> \* @package WordPress</span><br><span class="line"> \* @subpackage Twenty_Seventeen</span><br><span class="line"> \* @since <span class="number">1.0</span></span><br><span class="line"> \* @version <span class="number">1.0</span></span><br><span class="line"> */</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> &lt;a href=<span class="string">"&lt;?php echo esc\_url( \_\_( 'https://wordpress.org/', 'twentyseventeen'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">) ); ?&gt;"</span>&gt;<span class="meta">&lt;?php</span> printf( __( <span class="string">'Proudly powered by %s'</span>, <span class="string">'twentyseventeen'</span></span><br><span class="line"></span><br><span class="line">), <span class="string">'WordPress'</span></span><br><span class="line"></span><br><span class="line">); <span class="meta">?&gt;</span>&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;&lt;!-- .site-info --&gt;</span><br></pre></td></tr></table></figure><p>修改后文件如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">/\*\*</span><br><span class="line"> \* Displays footer site info</span><br><span class="line"> \*</span><br><span class="line"> \* @package WordPress</span><br><span class="line"> \* @subpackage Twenty_Seventeen</span><br><span class="line"> \* @since <span class="number">1.0</span></span><br><span class="line"> \* @version <span class="number">1.0</span></span><br><span class="line"> */</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> &lt;a href=<span class="string">"&lt;?php echo esc\_url( \_\_( 'https://wordpress.org/', 'twentyseventeen'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">) ); ?&gt;"</span>&gt;<span class="meta">&lt;?php</span> printf( __( <span class="string">'Proudly powered by %s'</span>, <span class="string">'twentyseventeen'</span></span><br><span class="line"></span><br><span class="line">), <span class="string">'WordPress'</span></span><br><span class="line"></span><br><span class="line">); <span class="meta">?&gt;</span>&lt;/a&gt;</span><br><span class="line"> |</span><br><span class="line"> &lt;span&gt;&lt;a href=<span class="string">"http://www.miitbeian.gov.cn/"</span></span><br><span class="line"></span><br><span class="line">rel=<span class="string">"external nofollow"</span></span><br><span class="line"></span><br><span class="line">target=<span class="string">"_blank"</span>&gt;哪ICP备XXXXXXXX号&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;&lt;!-- .site-info --&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><img src="/images/2017/12/20171212_12.jpg" alt> 本方法可能只适用于WordPress 4，以后版本还需要验证，欢迎验证后的朋友留言告知。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;老蔡正在使用WordPress 4.9.1，试了网上很多办法都无法正常让备案号显示在页脚，而备案托管方坚持不能把备案号放在网站友情链接中，于是自己折腾着解决了。&lt;/p&gt;
&lt;p&gt;做到显示备案号2步即可完成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;来到WordPress根目录，比如&lt;cod
      
    
    </summary>
    
      <category term="程序修改" scheme="https://www.oldcai.com/categories/%E7%A8%8B%E5%BA%8F%E4%BF%AE%E6%94%B9/"/>
    
    
      <category term="WordPress" scheme="https://www.oldcai.com/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>图灵测试只能测假装是人类的人工智能</title>
    <link href="https://www.oldcai.com/archives/1187/"/>
    <id>https://www.oldcai.com/archives/1187/</id>
    <published>2017-11-11T14:44:57.000Z</published>
    <updated>2018-10-23T14:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>每个人都是有利己性和利他性的。我不相信一个只有利他性的生物能够存活。</p><p>基于工具用途的人工智能，是在不断地在发展AI的功用性，也就是在不断发展利他性。没有人愿意做出一台“有私心”的机器，因为一怕驾驭不了，二来没利可图。</p><p>这么看，无论人工智能技术如何发展，都无法让机器有自我的意识，像人一样地思考。</p><h2 id="机器不一定要像人一样思考"><a href="#机器不一定要像人一样思考" class="headerlink" title="机器不一定要像人一样思考"></a>机器不一定要像人一样思考</h2><p>不过或许，要机器像人一样地思考，出发点就不是正确的。就像教现在的孩子生火、打猎，也不是不可以，偶尔还是一点生活的乐趣，只是很不必要。</p><p>人类的智慧源自远古而残酷的优胜劣汰——据我所信。那么它出生时所带的固件是更适应于太阳系中的地球这一隅的环境的，如果放到宇宙中其他环境中，就有着极大的不确定性。</p><h2 id="人类总体寿命和总体知识的赛跑"><a href="#人类总体寿命和总体知识的赛跑" class="headerlink" title="人类总体寿命和总体知识的赛跑"></a>人类总体寿命和总体知识的赛跑</h2><p>一个人一生能积累的知识、付出的行动是极为有限的。虽然人类可以通过不断延长寿命和教育继承来承载亘古以来的文明，但是几千年的文明已经让“裸机”们需要用掉近1/3有清晰意识的生命来刷入基础知识；而如果要研究到人类认知的尽头并试图推进，则通常至少要用到1/2或者更多的生命抵达。</p><h2 id="如何突破困境"><a href="#如何突破困境" class="headerlink" title="如何突破困境"></a>如何突破困境</h2><p>人类的硬件已经到了一个局部最优解，如果排开一切风险，难以再有进步了。而传承人类的知识甚至意志的，必将是另一种形式。</p><p>我不相信会再有一轮更激烈优胜劣汰，而将会有一种温和的方式升级智能的单位上限。</p><p>目前方法有两条科技树：</p><ul><li>在硅基上用程序模拟人脑，像上帝一样创造一个自我意识</li><li>在碳基上的编辑DNA序列，优化人类物种本身</li></ul><p>都很艰难，哪种更难？都是险招，但是哪种风险更小？</p><h2 id="图灵测试为何无效？"><a href="#图灵测试为何无效？" class="headerlink" title="图灵测试为何无效？"></a>图灵测试为何无效？</h2><p>按照图灵测试的“考纲”，能通过的AI，必然是有一定智慧的——只是这个考试太过站在人类的立场了。</p><p>同一个人因为不同的目的，对同一件事也会有截然不同的反应。如果图灵测试中的人类目的是不通过测试，而机器的目的是通过测试，那么不需要具备太高的智能，机器就能比人类更有机会被通过测试。</p><h2 id="硅基模拟面临的问题"><a href="#硅基模拟面临的问题" class="headerlink" title="硅基模拟面临的问题"></a>硅基模拟面临的问题</h2><p>而人类最终追求的是什么？最终生存并超越人类的AI，他的最终追求又会是什么？是人类给他设定的还是它自己产生的？</p><p>我想在没有根本理解清楚这些问题之前，通过硅基模拟人脑，很难创造出有自我意识的思维体，而且即使创造出来了，也是对人类有高度危险的。</p><h2 id="编辑DNA面临的问题"><a href="#编辑DNA面临的问题" class="headerlink" title="编辑DNA面临的问题"></a>编辑DNA面临的问题</h2><p>而编辑DNA，存在的问题也是很多。首先，人类还没有理解基因序列，对于现有样本的统计和归纳，得不出创造的办法；而基于随机的尝试，又面临调试周期太长，和不人道的问题。</p><h2 id="终极的人工智能会是怎样？"><a href="#终极的人工智能会是怎样？" class="headerlink" title="终极的人工智能会是怎样？"></a>终极的人工智能会是怎样？</h2><p>这个问题在人类总体知识的积累超过人类总体寿命的时候，才会变得尖锐，才必须解决。<br>由此看来，整个人类都是个巨大的拖延症侯群啊。</p><h2 id="人际关系发展阶段"><a href="#人际关系发展阶段" class="headerlink" title="人际关系发展阶段"></a>人际关系发展阶段</h2><p>如果人类能活到未来，两条科技树都很高级别，并且能融洽相处，可能会有的形态：</p><h3 id="新奴隶社会"><a href="#新奴隶社会" class="headerlink" title="新奴隶社会"></a>新奴隶社会</h3><p>人类不断地温和演进基因，并且大脑可以外挂芯片；<br>具有简单意识的利他性机器人为人类服务。</p><h3 id="人机平等社会"><a href="#人机平等社会" class="headerlink" title="人机平等社会"></a>人机平等社会</h3><p>人类通过基因修改，智力再次达到上限；<br>由于某种目的，给机器人创造了利己性等自我的意识；<br>部分机器人真正成为了独立个体，不只为人类服务，也有了自己的目标；<br>极端的机器被消灭，温和的具有自我意识的机器逐渐被那时的人类接受。</p><h3 id="人类被机器全面超越"><a href="#人类被机器全面超越" class="headerlink" title="人类被机器全面超越"></a>人类被机器全面超越</h3><p>人类的硬件已经无法再基于原有的底层的神经元结构做出任何优化；<br>机器的配置可以随心所欲地替换升级，一部分具有意识的机器掌控了大量的资源，开始主导整个社会的发展。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每个人都是有利己性和利他性的。我不相信一个只有利他性的生物能够存活。&lt;/p&gt;
&lt;p&gt;基于工具用途的人工智能，是在不断地在发展AI的功用性，也就是在不断发展利他性。没有人愿意做出一台“有私心”的机器，因为一怕驾驭不了，二来没利可图。&lt;/p&gt;
&lt;p&gt;这么看，无论人工智能技术如何
      
    
    </summary>
    
      <category term="人工智能" scheme="https://www.oldcai.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>F-Stack这个高性能网络库是用来干什么的</title>
    <link href="https://www.oldcai.com/archives/1165/"/>
    <id>https://www.oldcai.com/archives/1165/</id>
    <published>2017-05-10T08:43:00.000Z</published>
    <updated>2018-10-23T14:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>F-Stack文档和翻译得有些不足，老蔡认真阅读了几遍才发现自己好像还用不上。为了让以后探索它的同学更容易理解，在此整理了一下对它使用范围的描述。</p><ol><li><p><a href="http://www.f-stack.org/" target="_blank" rel="noopener">F-Stack</a>是一个用<a href="http://dpdk.org/" target="_blank" rel="noopener">Data Plane Development Kit</a>实现的，更高效利用网卡的，实现网络io模型的库，所以本身基于DPDK开发的项目可以在F-Stack基础上有个更好的接口来开发。</p></li><li><p>可以用在直接利用Posxi的程序中，比如Nginx，所以一些大型网站提高服务器性能也可以用到。</p></li><li><p>F-Stack是网络出现瓶颈后，能更高效利用网卡的一个库，所以，对基于网络的服务的提供商，比如CDN，DNS这种服务的提供商很有用。</p></li></ol><p>同类库中，更成熟的<a href="http://www.seastar-project.org/" target="_blank" rel="noopener">Seastar</a>也可以作为参考，该项目是<a href="http://www.scylladb.com/" target="_blank" rel="noopener">号称下一代Cassandra数据库ScyllaDB</a>的副产品。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;F-Stack文档和翻译得有些不足，老蔡认真阅读了几遍才发现自己好像还用不上。为了让以后探索它的同学更容易理解，在此整理了一下对它使用范围的描述。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.f-stack.org/&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="服务器运维" scheme="https://www.oldcai.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
      <category term="构架" scheme="https://www.oldcai.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/%E6%9E%84%E6%9E%B6/"/>
    
      <category term="软件评测" scheme="https://www.oldcai.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/%E6%9E%84%E6%9E%B6/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B/"/>
    
    
      <category term="F-Stack" scheme="https://www.oldcai.com/tags/F-Stack/"/>
    
      <category term="高性能" scheme="https://www.oldcai.com/tags/%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
</feed>
