<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老蔡博客</title>
  
  <subtitle>老蔡的总结和思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.oldcai.com/"/>
  <updated>2020-12-09T16:53:52.970Z</updated>
  <id>https://www.oldcai.com/</id>
  
  <author>
    <name>oldcai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>热门美股REITs股票对比</title>
    <link href="https://www.oldcai.com/investing/REITs/"/>
    <id>https://www.oldcai.com/investing/REITs/</id>
    <published>2020-12-08T17:08:00.000Z</published>
    <updated>2020-12-09T16:53:52.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么投REITs"><a href="#为什么投REITs" class="headerlink" title="为什么投REITs"></a>为什么投REITs</h2><p>投资房地产是财富稳健增值的一大法宝，属于保守型投资，因为毕竟没有那么多人每天盯着房价来做交易。<br>相比于股票，房地产投资也有弊端，流动性差和门槛高是其中最大两个。<br>那如果想让地产投资随时脱手，又不想像其他股票那样巨幅波动怎么做呢？<br>房地产投资基金REITs (real estate investment trust)就能很好的包罗房地产和股票的优点，买入后持有即可当包租公/包租婆，还不需要自己去管理物业水电这些麻烦事，可谓投资房地产的理想方式。</p><p>由于疫情，很多股票已经跌到较低位置，以至于以房租为主要收入的REITs如果维持2019年的收入不变的话，股息率有的甚至超过了40%</p><p>但是如果不深入了解一下，很容易就掉进表面上“高股息”，实际上高风险的大坑中。</p><p>下面我们来看看老蔡整理的具有代表性的一些REITs标的。</p><h2 id="美股REITs标的对比"><a href="#美股REITs标的对比" class="headerlink" title="美股REITs标的对比"></a>美股REITs标的对比</h2><p>美股中REITs标的很多，大大小小有一百多家。<br>REITs分两种：</p><ul><li>一种是自己经营房地产，赚租金和房地产增值；</li><li>一种是给第三方提供房地产按揭贷款，赚利息差。</li></ul><p>下面分类列举一些相应的REITs基金。</p><h3 id="收租型"><a href="#收租型" class="headerlink" title="收租型"></a>收租型</h3><h4 id="高风险，高股息面值"><a href="#高风险，高股息面值" class="headerlink" title="高风险，高股息面值"></a>高风险，高股息面值</h4><p>⚠️注意，股息高到不正常的可能有倒闭风险，也可能收入不可持续，需要深入研究。</p><pre><code>高风险股票中，均为业绩有10%以上减少的，个别(CORR)甚至减少了90%</code></pre><table><thead><tr><th style="text-align:center">股票代码</th><th style="text-align:center">股息率</th><th style="text-align:center">当前股价($)</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>PEI</strong></td><td style="text-align:center">41.9%</td><td style="text-align:center">1.04</td><td style="text-align:center">零售业</td></tr><tr><td style="text-align:center"><strong>WPG</strong></td><td style="text-align:center">32.75%</td><td style="text-align:center">1.15</td><td style="text-align:center">零售业</td></tr><tr><td style="text-align:center"><strong>AHT</strong></td><td style="text-align:center">19.42%</td><td style="text-align:center">3.09</td><td style="text-align:center">酒店、度假村</td></tr><tr><td style="text-align:center"><strong>CORR</strong></td><td style="text-align:center">11.55%</td><td style="text-align:center">7.78</td><td style="text-align:center">能源行业，油气管道</td></tr><tr><td style="text-align:center"><strong>EPR</strong></td><td style="text-align:center">7.97%</td><td style="text-align:center">33.11</td><td style="text-align:center">娱乐（影院、高尔夫、游乐场、滑雪场等）</td></tr><tr><td style="text-align:center"><strong>VNO</strong></td><td style="text-align:center">6.21%</td><td style="text-align:center">40.44</td><td style="text-align:center">办公地产</td></tr><tr><td style="text-align:center"><strong>WELL</strong></td><td style="text-align:center">4.12%</td><td style="text-align:center">65.56</td><td style="text-align:center">医疗保健</td></tr></tbody></table><h4 id="中等风险"><a href="#中等风险" class="headerlink" title="中等风险"></a>中等风险</h4><pre><code>中等风险股票中，业绩均有10%以内减少</code></pre><table><thead><tr><th style="text-align:center">股票代码</th><th style="text-align:center">股息率</th><th style="text-align:center">当前股价($)</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>GEO</strong></td><td style="text-align:center">19.73%</td><td style="text-align:center">9.73</td><td style="text-align:center">医疗保健</td></tr><tr><td style="text-align:center"><strong>CXW</strong></td><td style="text-align:center">11.3%</td><td style="text-align:center">7.79</td><td style="text-align:center">监狱😂</td></tr><tr><td style="text-align:center"><strong>KRG</strong></td><td style="text-align:center">5.06%</td><td style="text-align:center">15.17</td><td style="text-align:center">零售业</td></tr><tr><td style="text-align:center"><strong>REG</strong></td><td style="text-align:center">4.93%</td><td style="text-align:center">48.06</td><td style="text-align:center">零售业</td></tr><tr><td style="text-align:center"><strong>BXP</strong></td><td style="text-align:center">3.82%</td><td style="text-align:center">102.48</td><td style="text-align:center">办公地产</td></tr><tr><td style="text-align:center"><strong>EQR</strong></td><td style="text-align:center">3.82%</td><td style="text-align:center">62.16</td><td style="text-align:center">住宅</td></tr></tbody></table><h4 id="相对较低风险"><a href="#相对较低风险" class="headerlink" title="相对较低风险"></a>相对较低风险</h4><pre><code>下面几只较低风险的股票，疫情期间业绩均有不同程度增长</code></pre><table><thead><tr><th style="text-align:center">股票代码</th><th style="text-align:center">股息率</th><th style="text-align:center">当前股价($)</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>APTS</strong></td><td style="text-align:center">10.67%</td><td style="text-align:center">8.2</td><td style="text-align:center">豪华高档住宅</td></tr><tr><td style="text-align:center"><strong>DEA</strong></td><td style="text-align:center">4.82%</td><td style="text-align:center">21.59</td><td style="text-align:center">办公地产</td></tr><tr><td style="text-align:center"><strong>PEAK</strong></td><td style="text-align:center">4.78%</td><td style="text-align:center">30.95</td><td style="text-align:center">医疗保健</td></tr><tr><td style="text-align:center"><strong>O</strong></td><td style="text-align:center">4.58%</td><td style="text-align:center">60.68</td><td style="text-align:center">住宅</td></tr><tr><td style="text-align:center"><strong>DLR</strong></td><td style="text-align:center">3.29%</td><td style="text-align:center">134.76</td><td style="text-align:center">数据中心</td></tr></tbody></table><h3 id="贷款类mREITs"><a href="#贷款类mREITs" class="headerlink" title="贷款类mREITs"></a>贷款类mREITs</h3><p>由于贷款类mREITs并没有多少房地产属性，更像是银行，就不作过多研究。</p><p>mREITs的不良贷款越多，风险越大，就越便宜——股息也就越高（如果能拿到的话）</p><table><thead><tr><th style="text-align:center">股票代码</th><th style="text-align:center">股息率</th></tr></thead><tbody><tr><td style="text-align:center"><strong>IVR</strong></td><td style="text-align:center">31.29%</td></tr><tr><td style="text-align:center"><strong>TRTX</strong></td><td style="text-align:center">14.42%</td></tr><tr><td style="text-align:center"><strong>CIM</strong></td><td style="text-align:center">14.03%</td></tr><tr><td style="text-align:center"><strong>ORC</strong></td><td style="text-align:center">13.9%</td></tr><tr><td style="text-align:center"><strong>CHMI</strong></td><td style="text-align:center">13.77%</td></tr><tr><td style="text-align:center"><strong>PMT</strong></td><td style="text-align:center">8.58%</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>REITs是经济稳定时期获取稳定现金流的好办法之一，但是这次疫情到来对一些依赖传统零售业的REITs受到沉重打击，进而导致整个REITs被抛售。</p><p>我们可以适当布局一些低风险、被错杀的REITs股票，在低利率时代，赚取稳定股息的同时，上车房地产，享受不动产增值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么投REITs&quot;&gt;&lt;a href=&quot;#为什么投REITs&quot; class=&quot;headerlink&quot; title=&quot;为什么投REITs&quot;&gt;&lt;/a&gt;为什么投REITs&lt;/h2&gt;&lt;p&gt;投资房地产是财富稳健增值的一大法宝，属于保守型投资，因为毕竟没有那么多人每天盯着房价
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
      <category term="美股" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/%E7%BE%8E%E8%82%A1/"/>
    
    
      <category term="REITs" scheme="https://www.oldcai.com/tags/REITs/"/>
    
  </entry>
  
  <entry>
    <title>成长的基准</title>
    <link href="https://www.oldcai.com/random-thoughts/benchmark/"/>
    <id>https://www.oldcai.com/random-thoughts/benchmark/</id>
    <published>2020-12-05T12:22:31.000Z</published>
    <updated>2020-12-05T12:53:18.443Z</updated>
    
    <content type="html"><![CDATA[<p>我们总是谈到个人成长，每个人的标准不同。</p><p>一个成长到比较高程度的人应该是什么样的？</p><p>中国传统价值的标杆，是仁义礼智信。</p><p>但这个标杆，只是道，而不是术。</p><p>虽然说有道无术，术尚可求也，有术无道，止于术。</p><p>但就算道和术都明白了也不一定能做的好。就时间管理来说，做好的人也只是寥寥。</p><p>老蔡给自己定义的成长的维度有四个：</p><ul><li>明确方向</li><li>掌握方法</li><li>掌控欲望</li><li>坚持行动</li></ul><p>看清方向，是中国传统的道；<br>西方哲学更注重方法，包括法和术，细分到各个学科的方法论，技术，学术。</p><p>人心人性，总是缺乏恒心。源自于欲望就像野火，燎燃容易，熄灭的也快。</p><p>而行动力更在心理层面之外。如果摒弃了行动，明白所有道理也是无用。<br>王小波读萧伯纳的时候，感慨自己不能做一个一无所能，就能明辨是非的人，大概就是这样吧。<br>而如果坚持行动，即使不明白大道理，也有概率让这个世界变得不一样。</p><p>明确的方向，科学的方法，平和的心态，持续的行动。这是我幸福感的源泉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们总是谈到个人成长，每个人的标准不同。&lt;/p&gt;
&lt;p&gt;一个成长到比较高程度的人应该是什么样的？&lt;/p&gt;
&lt;p&gt;中国传统价值的标杆，是仁义礼智信。&lt;/p&gt;
&lt;p&gt;但这个标杆，只是道，而不是术。&lt;/p&gt;
&lt;p&gt;虽然说有道无术，术尚可求也，有术无道，止于术。&lt;/p&gt;
&lt;p&gt;但就
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>炒股的意义</title>
    <link href="https://www.oldcai.com/investing/meaning-of-stock-trading/"/>
    <id>https://www.oldcai.com/investing/meaning-of-stock-trading/</id>
    <published>2020-12-04T11:17:59.000Z</published>
    <updated>2020-12-04T12:15:43.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="炒股有意义吗？"><a href="#炒股有意义吗？" class="headerlink" title="炒股有意义吗？"></a>炒股有意义吗？</h2><p>很多年前，有个职业炒股的朋友跟我讲，他总觉得炒股没有成就感，只是在零和游戏中赚点钱，没有意义。我知道他不是在搞什么“凡尔赛体”，很多人都找不到买卖股票的意义。</p><p>我想在很多年前，做商人也是这样吧，低买高卖，寻找利润。但如今，我们已经能够充分认识到商人的重要价值——让商品流通，给人带来便利。</p><p>那股票投资的价值在哪里呢？</p><h2 id="投机的意义深远"><a href="#投机的意义深远" class="headerlink" title="投机的意义深远"></a>投机的意义深远</h2><p>投资的体系很多，最主流的划分方式是价投和投机。</p><p>价值投资更容易找到自己行为的意义，因为毕竟是在投资公司，投资生意。</p><p>价投更像是在寻找美好的事物，发现美好的事物，并用自己的钱来支持它们。</p><p>如果“不幸”在做投机生意，那就更加容易迷茫了。</p><p>投机者或者扎堆题材概念，或者关心趋势波段，更短的甚至只关心日内交易。</p><p>炒作概念的投机更像是艺术。用想象力构造出未来的世界的样子，创造风口，然后才会有资金和激情注入到梦想中，构筑成现实。</p><p>一个概念提出后，大家也会用买卖来表示是否认同。买卖造成了涨跌，涨跌形成了趋势，聪明的资本才会因为选择对了方向受到奖赏，从而去挖掘下一个伟大的公司。</p><p>短期的证券投机行为还给市场提供了充裕的流动性——钱。没有钱的市场是死水一潭，钱太多也会让市场失去焦点。适量的钱，才会让市场有动力去优化资源分配，让钱和资源使用率更加高效。有了流动性后，优秀的企业还可以通过增发等办法，获取更多资源得以壮大。</p><p>所以，股票投机是创造未来、选择未来的一部分。炒股的意义不输于其他任何事业。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;炒股有意义吗？&quot;&gt;&lt;a href=&quot;#炒股有意义吗？&quot; class=&quot;headerlink&quot; title=&quot;炒股有意义吗？&quot;&gt;&lt;/a&gt;炒股有意义吗？&lt;/h2&gt;&lt;p&gt;很多年前，有个职业炒股的朋友跟我讲，他总觉得炒股没有成就感，只是在零和游戏中赚点钱，没有意义。我知道
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
    
  </entry>
  
  <entry>
    <title>美股2020年底展望</title>
    <link href="https://www.oldcai.com/investing/2020-ending/"/>
    <id>https://www.oldcai.com/investing/2020-ending/</id>
    <published>2020-11-29T07:36:56.000Z</published>
    <updated>2020-12-04T11:16:53.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h2><p>2020经历了太多大事，谁也不会料想到年初就开始的疫情一直持续到现在，还全世界范围内愈演愈烈。</p><p>美国总统选举也是历史上少有的激烈，多少也参杂有疫情的因素在内。</p><p>但是美股的表现不可谓不积极：</p><ol><li>道琼斯，纳斯达克，标普500已全部创历史新高</li><li>道指，纳指，标普3月最低点以来涨幅已经达到67%，77%，66%。</li></ol><p>这可是在疫情重创经济的2020发生的。</p><h2 id="冷静思考"><a href="#冷静思考" class="headerlink" title="冷静思考"></a>冷静思考</h2><p>观察经济数据，会发现目前经济其实是下行的，而股市却新高了。什么指数都在涨涨涨，除了美元指数。</p><p>静下来想想，现在的市场只是在反映对货币宽松的预期。毕竟美联储无限量化宽松，债务规模6月份就又扩大了3万亿，到了7万亿美元，而后面还有1-2万亿美元的经济刺激法案在国会“百米冲刺”的速度处理中。这种宽松政策在往年是不可想象的。</p><p>本来想到这里，本能的反应是清空美股，安心过个寒假。毕竟鱼尾刺多，不那么容易吃。<br>但可能情绪有些极端。</p><p>现在摆在眼前的不确定因素有两个，一个是总统是谁，一个是刺激法案金额。</p><p>总统的事情最终落定在1月20到2月初。</p><p>刺激法案如果出来，超预期才会有暴涨；如果按预期或者低于预期的话可能有些风险——但长期看还是会有慢牛——毕竟钱不是马上到位的，而当下也不见得有那么多其他的好资产等着投资。</p><p>对于宽松和刺激法案，老蔡做个对比：</p><ul><li>上证指数包含市值43万亿，08年4万亿刺激涨了5倍</li><li>标普500市值23万亿刀，只看刺激法案的2万亿，比例也差不多；而现在底部起来才涨了一倍不到</li></ul><p>可能两个<strong>风险</strong>是，总统问题陷入宪政危机，刺激法案金额不达预期，但都应该不是长期问题。长期看美国经济还是世界经济的引擎，会保持增长趋势。</p><h2 id="展望和预期"><a href="#展望和预期" class="headerlink" title="展望和预期"></a>展望和预期</h2><p>现在复苏主题的股票，盈亏比还是很诱人的，比如邮轮，旅游，航空，石油；</p><p>纳指短期看的确已经很贵，仍在盘整，估计短期上涨还得等水来，等其他股票估值也提升，从而没有那么多估值溢价。</p><p>所以，短期看，疫情控制，疫苗分发，经济复苏是主线任务。</p><p>长期看，保持高增长的大公司都在纳斯达克，指数增长的动力在这些大公司停止两位数的增长前很难消退。</p><p>所以老蔡打算选择的策略是，留30%现金以备风险到来，目前主要布局复苏股，少量布局高增长科技股，毕竟这是老蔡最熟悉的板块。</p><p>苦尽甘来，辞旧迎新，希望有个美好的2021。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2020年&quot;&gt;&lt;a href=&quot;#2020年&quot; class=&quot;headerlink&quot; title=&quot;2020年&quot;&gt;&lt;/a&gt;2020年&lt;/h2&gt;&lt;p&gt;2020经历了太多大事，谁也不会料想到年初就开始的疫情一直持续到现在，还全世界范围内愈演愈烈。&lt;/p&gt;
&lt;p&gt;美国总
      
    
    </summary>
    
      <category term="美股" scheme="https://www.oldcai.com/categories/%E7%BE%8E%E8%82%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>国内几家在线流媒体播放公司成长趋势比较</title>
    <link href="https://www.oldcai.com/investing/cn-media-companies/"/>
    <id>https://www.oldcai.com/investing/cn-media-companies/</id>
    <published>2020-11-23T12:48:19.000Z</published>
    <updated>2020-11-29T07:36:41.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="百度指数对比"><a href="#百度指数对比" class="headerlink" title="百度指数对比"></a>百度指数对比</h2><p>截止至2020-11-23为止，QQ音乐+酷狗音乐，网易云音乐，哔哩哔哩，爱奇艺，抖音+快手</p><p>这几家流媒体公司的百度指数如图：<br><img src="https://i.imgur.com/Qa1U3Bx.jpg" alt></p><h2 id="趋势分析"><a href="#趋势分析" class="headerlink" title="趋势分析"></a>趋势分析</h2><p>其中，爱奇艺的搜索量下降趋势明显。</p><p>B站目前看来热度还在上升，但是增长率已经放缓了。</p><p>音乐播放器（酷狗+QQ+网易）搜索都有缓慢下降的趋势，但老蔡又想不出其他头部音乐播放器，<br>所以推测应该是：近几年用户对于手机应用的搜索，已经不断从百度搜索转移到移动端应用商店里。</p><pre><code>整体来说两家的音乐播放器是旗鼓相当的。</code></pre><p>另外还有个有意思的发现是，疫情短暂降低了音乐应用的搜索量，却骤然提升了播剧的应用，如爱奇艺，但bilibili是先降后升并超过爱奇艺的增幅。</p><table><thead><tr><th style="text-align:center">应用</th><th style="text-align:center">影响</th></tr></thead><tbody><tr><td style="text-align:center"><strong>爱奇艺</strong></td><td style="text-align:center">骤升</td></tr><tr><td style="text-align:center"><strong>抖音+快手</strong></td><td style="text-align:center">骤升</td></tr><tr><td style="text-align:center"><strong>哔哩哔哩</strong></td><td style="text-align:center">先降后大幅增加</td></tr><tr><td style="text-align:center"><strong>QQ音乐+酷狗</strong></td><td style="text-align:center">先降后恢复</td></tr><tr><td style="text-align:center"><strong>网易云音乐</strong></td><td style="text-align:center">先降后恢复</td></tr></tbody></table><h2 id="增长预期"><a href="#增长预期" class="headerlink" title="增长预期"></a>增长预期</h2><p>目前国内的IP产业布局最前沿的就是这几个公司，预计在未来知识产权时代中，受益的也是它们。</p><p>而在ARK基金中，预计到2024年为止，美国在线流媒体音乐播放会占据整个音乐市场的更大份额，并抬高整个音乐市场的规模。美股中的Spotify等股票的预计年化增长率是18%</p><p><img src="https://i.imgur.com/wO2E2e6.jpg" alt></p><p>相信在重视版权后的中国，这样的增长也是可以预期的。</p><p>另外，ARK的2020年的展望中还能看出，未来几年，美国的在线点播媒体也将加速替代传统电视媒体，预计年化增长率有惊人的51%</p><p><img src="https://i.imgur.com/MelOUXv.jpg" alt></p><p>国内随着机顶盒和智能电视的普及，相信相关产业的升级换代甚至可以比美国更快。而拥有IP，制造内容的公司将会获得更高的利润。</p><p>综合搜索趋势、行业趋势，老蔡选择投入更多哔哩哔哩和腾讯音乐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;百度指数对比&quot;&gt;&lt;a href=&quot;#百度指数对比&quot; class=&quot;headerlink&quot; title=&quot;百度指数对比&quot;&gt;&lt;/a&gt;百度指数对比&lt;/h2&gt;&lt;p&gt;截止至2020-11-23为止，QQ音乐+酷狗音乐，网易云音乐，哔哩哔哩，爱奇艺，抖音+快手&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
      <category term="美股" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/%E7%BE%8E%E8%82%A1/"/>
    
    
      <category term="中概股" scheme="https://www.oldcai.com/tags/%E4%B8%AD%E6%A6%82%E8%82%A1/"/>
    
      <category term="腾讯音乐" scheme="https://www.oldcai.com/tags/%E8%85%BE%E8%AE%AF%E9%9F%B3%E4%B9%90/"/>
    
      <category term="哔哩哔哩" scheme="https://www.oldcai.com/tags/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9/"/>
    
      <category term="网易" scheme="https://www.oldcai.com/tags/%E7%BD%91%E6%98%93/"/>
    
      <category term="爱奇艺" scheme="https://www.oldcai.com/tags/%E7%88%B1%E5%A5%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>Why Can&#39;t I Trade Options in Td Ameritrade?</title>
    <link href="https://www.oldcai.com/investing/td-ameritrade-uncleared-deposits/"/>
    <id>https://www.oldcai.com/investing/td-ameritrade-uncleared-deposits/</id>
    <published>2020-11-16T02:37:26.000Z</published>
    <updated>2020-11-23T12:53:57.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reasons-Why-Options-Trading-Not-Available"><a href="#Reasons-Why-Options-Trading-Not-Available" class="headerlink" title="Reasons Why Options Trading Not Available"></a>Reasons Why Options Trading Not Available</h2><p>There are two main reasons why your account cannot be used to buy options.</p><ol><li>Unsupported Account Type<ol><li>Trust accounts</li><li>529 education accounts</li><li>Pension plans</li></ol></li><li>Deposits are not cleared</li></ol><p>Options and most stocks priced under $5 a share are not able to trade before deposits are cleared.</p><h2 id="Check-Uncleared-Deposits"><a href="#Check-Uncleared-Deposits" class="headerlink" title="Check Uncleared Deposits"></a>Check Uncleared Deposits</h2><p>After confirming that the account type supports the options transaction, you can check the outstanding payment on the website.</p><h3 id="How-to-Check-Uncleared-Deposits"><a href="#How-to-Check-Uncleared-Deposits" class="headerlink" title="How to Check Uncleared Deposits"></a>How to Check Uncleared Deposits</h3><p>Click <a href="https://invest.ameritrade.com/grid/p/site#r=transfersActivity" target="_blank" rel="noopener">this link</a></p><p>Or find in the navigation bar as below.</p><pre><code>My Account &gt; Deposits &amp; Transfers &gt; Activity</code></pre><ol><li>Click &gt; Cash available for withdrawal</li><li>You’ll see &gt; Uncleared deposits</li></ol><p><img src="https://i.imgur.com/HByXdGp.jpg" alt="2020-11-16 at 10.18 am"></p><p>You can wait until TD Ameritrade clears your deposits.</p><h2 id="How-Long-Does-It-Take-to-Clear"><a href="#How-Long-Does-It-Take-to-Clear" class="headerlink" title="How Long Does It Take to Clear"></a>How Long Does It Take to Clear</h2><p>According to the feedback from TD Ameritrade customer service, the timetable for receipt is as follows.</p><table><thead><tr><th style="text-align:center">Deposits Type</th><th style="text-align:center">Clearance Duration</th></tr></thead><tbody><tr><td style="text-align:center"><strong>electronic (ACH)</strong></td><td style="text-align:center">2-4 business days</td></tr><tr><td style="text-align:center"><strong>Checks</strong></td><td style="text-align:center">4-5 business days</td></tr><tr><td style="text-align:center"><strong>Wire</strong></td><td style="text-align:center">As soon as they post to your account</td></tr></tbody></table><p>If you cannot buy options or other ideal securities immediately after deposit but still afraid of losing time-sensitive opportunities, please work out your investment plan with the timetable above.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reasons-Why-Options-Trading-Not-Available&quot;&gt;&lt;a href=&quot;#Reasons-Why-Options-Trading-Not-Available&quot; class=&quot;headerlink&quot; title=&quot;Reasons Wh
      
    
    </summary>
    
      <category term="Options" scheme="https://www.oldcai.com/categories/Options/"/>
    
    
      <category term="TD Ameritrade" scheme="https://www.oldcai.com/tags/TD-Ameritrade/"/>
    
  </entry>
  
  <entry>
    <title>为什么我的TD Ameritrade账号不能购买期权？</title>
    <link href="https://www.oldcai.com/investing/td-ameritrade-uncleared-deposits-zh-cn/"/>
    <id>https://www.oldcai.com/investing/td-ameritrade-uncleared-deposits-zh-cn/</id>
    <published>2020-11-16T02:06:55.000Z</published>
    <updated>2020-11-23T12:53:57.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不能购买期权的原因"><a href="#不能购买期权的原因" class="headerlink" title="不能购买期权的原因"></a>不能购买期权的原因</h2><p>有两种原因可能导致账号不能购买期权</p><ol><li>账号类型不支持<ol><li>信托账号（Trust accounts）</li><li>529教育储蓄基金账号（529 education accounts）</li><li>退休金账号（Pension plans）</li></ol></li><li>银证转账还未结清</li></ol><p>其中，转账还未结清还可能影响到：不能交易粉单市场（大部分$5以下的股票），也不能提现。</p><h2 id="查看未结款项（uncleared-deposits）"><a href="#查看未结款项（uncleared-deposits）" class="headerlink" title="查看未结款项（uncleared deposits）"></a>查看未结款项（uncleared deposits）</h2><p>先确认账号类型支持options的交易后，可以在网站查询到未结清款项。</p><h3 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法"></a>查询方法</h3><p>点击<a href="https://invest.ameritrade.com/grid/p/site#r=transfersActivity" target="_blank" rel="noopener">这个链接</a></p><p>或者在导航栏找到</p><pre><code>My Account &gt; Deposits &amp; Transfers &gt; Activity</code></pre><p>然后点开Cash available for withdrawal</p><p>会看到uncleared deposits</p><p><img src="https://i.imgur.com/HByXdGp.jpg" alt="2020-11-16 at 10.18 am"></p><p>等到结清后即可。</p><h2 id="结清所需时间"><a href="#结清所需时间" class="headerlink" title="结清所需时间"></a>结清所需时间</h2><p>老蔡经过咨询后，根据TD Ameritrade客服反馈，到账时间表如下</p><table><thead><tr><th style="text-align:center">汇款类型</th><th style="text-align:center">结清时间</th></tr></thead><tbody><tr><td style="text-align:center"><strong>ACH电汇</strong></td><td style="text-align:center">2-4个工作日</td></tr><tr><td style="text-align:center"><strong>支票账户</strong></td><td style="text-align:center">4-5个工作日</td></tr><tr><td style="text-align:center"><strong>Wire电汇</strong></td><td style="text-align:center">到账后立刻结清。美国国内转账一般1-3小时，国际1-2天</td></tr></tbody></table><p>如果汇款后不能立刻购买期权或者其他理想标的，但是又怕踏空。对照上面的汇款所需时间，可以合理安排投资。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;不能购买期权的原因&quot;&gt;&lt;a href=&quot;#不能购买期权的原因&quot; class=&quot;headerlink&quot; title=&quot;不能购买期权的原因&quot;&gt;&lt;/a&gt;不能购买期权的原因&lt;/h2&gt;&lt;p&gt;有两种原因可能导致账号不能购买期权&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;账号类型不支持&lt;ol&gt;
      
    
    </summary>
    
      <category term="期权" scheme="https://www.oldcai.com/categories/%E6%9C%9F%E6%9D%83/"/>
    
    
      <category term="TD Ameritrade" scheme="https://www.oldcai.com/tags/TD-Ameritrade/"/>
    
  </entry>
  
  <entry>
    <title>7个方法帮你提高战略的执行力</title>
    <link href="https://www.oldcai.com/strategy/how-to-improve-strategy-execution/"/>
    <id>https://www.oldcai.com/strategy/how-to-improve-strategy-execution/</id>
    <published>2020-11-15T07:26:48.000Z</published>
    <updated>2020-11-23T12:51:15.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要提高战略的执行？"><a href="#为什么要提高战略的执行？" class="headerlink" title="为什么要提高战略的执行？"></a>为什么要提高战略的执行？</h2><p>我们总是有很多努力会白费，很多改变世界的大想法都远远达不到预期。</p><p>要怎样改变才能让成功，并且持续成功呢？</p><p>下面7个方法可以帮到你。</p><h2 id="1-创造紧迫感"><a href="#1-创造紧迫感" class="headerlink" title="1. 创造紧迫感"></a>1. 创造紧迫感</h2><p>不改变，就死亡——一个组织想要改变，它得需要有心脏病发一样的致命威胁。</p><p>我们几乎可以在每个重大进步的背后都能找到这种痛苦和恐惧。</p><p>你不必享受它，你这么做只是因为你必须。</p><h2 id="2-团结领导团队"><a href="#2-团结领导团队" class="headerlink" title="2. 团结领导团队"></a>2. 团结领导团队</h2><p>大多数战略变革的失败都因为管理层的不和，即使表面上看起来风平浪静，每个人都围坐在会议桌旁，点头同意。</p><h2 id="3-提供清晰愿景"><a href="#3-提供清晰愿景" class="headerlink" title="3. 提供清晰愿景"></a>3. 提供清晰愿景</h2><p>你觉得成功会是什么样？有什么计划能变成那样？不改变有什么痛苦？</p><p>尝试用一些印象深刻的语言表达出来。</p><h2 id="4-提出不一样的问题"><a href="#4-提出不一样的问题" class="headerlink" title="4. 提出不一样的问题"></a>4. 提出不一样的问题</h2><p>如果您想要不同的答案，那你就应该提出不同的问题——和新战略相关的新问题。</p><p>如果你有战略变革的紧迫感、预料和解决了领导团队中出现的问题、对最终目标有清晰的认识，还能提出不同的问题来鼓励改变的行为，你已经成功了一半，你已经拥有了一个强大变革的基础。</p><h2 id="5-一起制定计划"><a href="#5-一起制定计划" class="headerlink" title="5. 一起制定计划"></a>5. 一起制定计划</h2><p>如果你已经使领导团队团结一致，创建并传达了好的愿景，并让团队感受到了战略变革的紧迫性，剩下的事情就好办了。因为当大家知道为什么要进行变革时，他们会自发地找出需要改变的来进行更改。</p><h2 id="6-设计好短期的胜利"><a href="#6-设计好短期的胜利" class="headerlink" title="6. 设计好短期的胜利"></a>6. 设计好短期的胜利</h2><p>重大战略变革需要时间。</p><p>改变策略需要面临颠覆认知、陡峭的学习曲线、起步困难——你能想到的一切拖后腿的东西。</p><p>你需要聚焦在做对了的事情上，多宣传和庆祝成功。</p><p>胜利和成功对于保持动力至关重要。</p><h2 id="7-将变化融入文化"><a href="#7-将变化融入文化" class="headerlink" title="7. 将变化融入文化"></a>7. 将变化融入文化</h2><p>这是最简单，也是最难的一步。</p><p>养成习惯需要长时间积累行动。</p><p>不断重复运用，是培养好习惯的最好的方法。</p><p>如果跳过这最简单的一步，之前所有的痛苦、颠覆、努力都会付诸东流。</p><p>因为随着时间的流逝，人们又会回到自己熟悉的方式。</p><p>那也就意味着我们又一项变革计划宣告失败，因为它被人们遗忘了。</p><p>间歇性重复是一种有效的方法，它不仅可以让战略调整的影响变得持久，还能让不断改变这一理念，永久性地成为你们文化的一部分。</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p><a href="http://sixdisciplines.blogspot.com/2006/10/leading-successful-sustainable-change.html" target="_blank" rel="noopener">Leading Successful, Sustainable Change</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要提高战略的执行？&quot;&gt;&lt;a href=&quot;#为什么要提高战略的执行？&quot; class=&quot;headerlink&quot; title=&quot;为什么要提高战略的执行？&quot;&gt;&lt;/a&gt;为什么要提高战略的执行？&lt;/h2&gt;&lt;p&gt;我们总是有很多努力会白费，很多改变世界的大想法都远远达不到预
      
    
    </summary>
    
      <category term="战略" scheme="https://www.oldcai.com/categories/%E6%88%98%E7%95%A5/"/>
    
    
      <category term="战略执行" scheme="https://www.oldcai.com/tags/%E6%88%98%E7%95%A5%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>双十一买了点英特尔</title>
    <link href="https://www.oldcai.com/investing/intc-2020-11-11/"/>
    <id>https://www.oldcai.com/investing/intc-2020-11-11/</id>
    <published>2020-11-11T04:13:51.000Z</published>
    <updated>2020-11-23T12:48:12.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h2 id="风险分析"><a href="#风险分析" class="headerlink" title="风险分析"></a>风险分析</h2><p>如此多事之秋，英特尔当前面临的挑战可谓是前所未有。</p><ol><li>首先，英特尔的酷睿应该是吃到头了，下一代构架不知道还有多远</li><li>其次，制程上也落后竞争对手AMD一代半</li><li>苹果今天推出了省电+高性能的arm芯片，雪上加霜<ul><li>arm构架一直以来都被认作为x86构架的挑战者</li><li>Apple M1 Mac处理器号称25％耗电，2倍效能</li></ul></li><li>Intel CEO也是财务出身，比起AMD的苏博士，算是外行领导内行，也是不被看好的理由之一</li></ol><p>种种不利因素都汇集在了一起，有一种价值陷阱的感觉。</p><p>但是芯片领域其他几只股票，如AMD，Nvidia，高通，甚至台积电，都贵的有些烫手了。</p><h3 id="行业格局"><a href="#行业格局" class="headerlink" title="行业格局"></a>行业格局</h3><p>在英特尔（INTC）扳回7nm制程之前，AMD、高通、苹果的ARM芯片要在这个窗口期来抢夺芯片市场，就必须在台积电、三星争夺产能。</p><p>争夺产能的结果往往是代工价格提升，这也是我上次<a href="/investing/tsm-2020-10-16/">买入台积电的理由</a>。</p><h3 id="布局未来"><a href="#布局未来" class="headerlink" title="布局未来"></a>布局未来</h3><p>另外，在Intel在自动驾驶这样的新领域中也有布局。</p><p>2017年以来，英特尔先后以153亿美元收购了机器视觉公司Mobileye，20亿美元收购了AI公司Habana Labs，今年又9亿美元收购了出行方案公司Moovit，并且正在以色列打造其自动驾驶研发基地。</p><p>而这些收购在目前1800亿市值来看，简直相当于白送。</p><h3 id="周期分析"><a href="#周期分析" class="headerlink" title="周期分析"></a>周期分析</h3><p>从老蔡自己的经历来看，大多数人不会马上就买最新出的CPU。</p><p>我去年2019 11月份配的电脑CPU是19年第一季度推出的；</p><p>前年2018年11月份配的电脑CPU是AMD 2018年4月推出的。</p><p>而且电脑淘汰周期长，普通人的电脑用三五年不成问题，英特尔主营的企业市场应该也有3年淘汰周期（Dell、联想的服务器保修时间都是3年）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以我觉得英特尔如果2021年能按计划推出7nm的话，就能活过来了。</p><p>从英特尔现在所面临的危机程度来看，公司管理层相当紧张，提前4，5个月把11代CPU的PPT拿出来放，这在以前是从未有过的。</p><p>Intel的软实力还是十分强大的，而我对英特尔公司按时推出7nm制程处理器的决心现在是一点都不怀疑，毕竟牙膏已经挤到底了。</p><p>但如果出不来可能还有大跌。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;h2 id=&quot;风险分析&quot;&gt;&lt;a href=&quot;#风险分析&quot; class=&quot;headerlink&quot; title=&quot;风险分析&quot;&gt;&lt;/a&gt;风险分析&lt;/h
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
      <category term="美股" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/%E7%BE%8E%E8%82%A1/"/>
    
    
      <category term="英特尔" scheme="https://www.oldcai.com/tags/%E8%8B%B1%E7%89%B9%E5%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>赌川普赢，赔率接近3倍</title>
    <link href="https://www.oldcai.com/politics/trump-win-token/"/>
    <id>https://www.oldcai.com/politics/trump-win-token/</id>
    <published>2020-10-16T04:42:44.000Z</published>
    <updated>2020-10-17T06:53:00.262Z</updated>
    
    <content type="html"><![CDATA[<p>按我个人对政治肤浅的见解，川普这次连任应该概率是很大的。</p><p>在和一些小朋友探讨后，他们怂恿我去买一个基于加密货币的金融衍生品，一个叫做TRUMPWIN的token。看了一下，赔率是1/0.361=2.77的样子</p><p><a href="https://support.poloniex.com/hc/en-us/articles/360052070213-TRUMPWIN-TRUMPLOSE-Are-Now-on-Poloniex" target="_blank" rel="noopener">点这里看TRUMPWIN token介绍</a></p><p><a href="https://poloniex.com/exchange/USDT_TRUMPWIN" target="_blank" rel="noopener">点这里进交易页面</a></p><p>其实在传统博彩网站上，早就有类似的盘口。</p><p>参考<a href="https://www.oddschecker.com/politics/us-politics/us-presidential-election-2020/winner" target="_blank" rel="noopener">oddschecker</a>上的押注情况，川普目前赔率在2.88，拜登在1.4</p><h2 id="这就很有趣了"><a href="#这就很有趣了" class="headerlink" title="这就很有趣了"></a>这就很有趣了</h2><p>即使川普拜登两边胜率在50%：50%</p><p>按凯利公式计算，投注比例32.01%，也有13.35%收益率。</p><p>而到大选还只有不到一个月了，这样的收益期望相当可观。</p><p>当然，选举结果这种东西有高不确定性，小赌怡情就好。</p><h2 id="更远一点的思考"><a href="#更远一点的思考" class="headerlink" title="更远一点的思考"></a>更远一点的思考</h2><p>这个偏差是什么原因导致的？</p><p>因为我所掌握的信息是被扭曲的（实际上川普没那么大胜算，甚至快输了）？</p><p>还是投注的人来自的社会圈子有共性（都是不支持川普的人）？</p><p>或者是媒体在一次次民调中的预测所起到的影响导致的？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按我个人对政治肤浅的见解，川普这次连任应该概率是很大的。&lt;/p&gt;
&lt;p&gt;在和一些小朋友探讨后，他们怂恿我去买一个基于加密货币的金融衍生品，一个叫做TRUMPWIN的token。看了一下，赔率是1/0.361=2.77的样子&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s
      
    
    </summary>
    
      <category term="赌博" scheme="https://www.oldcai.com/categories/%E8%B5%8C%E5%8D%9A/"/>
    
    
      <category term="token" scheme="https://www.oldcai.com/tags/token/"/>
    
      <category term="Trump" scheme="https://www.oldcai.com/tags/Trump/"/>
    
  </entry>
  
  <entry>
    <title>计划台积电中长期持有，聊聊最浅显的买入逻辑</title>
    <link href="https://www.oldcai.com/investing/tsm-2020-10-16/"/>
    <id>https://www.oldcai.com/investing/tsm-2020-10-16/</id>
    <published>2020-10-16T04:13:51.000Z</published>
    <updated>2020-11-23T12:51:47.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h2><p>因为今年订立的目标是，由短线转为长线交易，但这次对台积电（TSM）在短期内的操作，并不是出于短线考虑，所以值得记录一下。</p><p>前几天因为感觉到大盘会调整，所以减了很多股票的仓位，台积电也是其中之一，不过不是减仓而是清仓。</p><p>之前的思考是，台积电这种重资产的企业，受产能制约很难飞速发展。近几年的销售收入增幅只有3%，5%，4%，比起手上其他的如NET，BILI这样动辄50%增长的小妖精，真的是太不性感了。</p><p>这几天虽然如预期一样有调整，但是没看出恐慌情绪，对后市的预期变好，所以想补一些仓位，考虑再三，还是选择了台积电（TSM）。</p><p>补加回来了一些，目前占5%仓位，计划持有至少3个月。</p><h2 id="格局"><a href="#格局" class="headerlink" title="格局"></a>格局</h2><p>现在的芯片产业格局，台积电处于高端芯片不可替代的上游产业。</p><p>从断供华为后麒麟就飞不起来了这件事情上，就可以看出，台积电把控着芯片产业的命脉，就像当年的锂矿把握锂电命脉一样。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在英特尔（INTC）重新扳回7nm制程这一局之前，其他芯片厂商，如AMD以及自研ARM芯片的苹果想在这个窗口期来抢夺芯片市场，就必须在台积电和三星争夺产能。</p><p>而下一代迈入5nm的芯片工艺，连三星都还没有准备好。</p><p>届时，原本在移动ARM芯片领域中就炙手可热了的5nm制程芯片（因为省电和高性能），而如今更是因为PC端芯片厂的加入而更加紧缺。</p><p>而通过什么来争夺资源呢？在有效市场中，是靠价格。</p><p>这个趋势反映到公司运营数据上，就是巨幅增加台积电下几个财报周期的盈利。</p><p>这也是台积电到目前为止已经翻倍的内在原因之一。</p><p>不过仍需注意的是，市场其实知道台积电的产能不足，也已经反映了对芯片代工的价格上涨的预期，否则营收个位数的增长不可能支撑3月到现在翻倍的涨幅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作记录&quot;&gt;&lt;a href=&quot;#操作记录&quot; class=&quot;headerlink&quot; title=&quot;操作记录&quot;&gt;&lt;/a&gt;操作记录&lt;/h2&gt;&lt;p&gt;因为今年订立的目标是，由短线转为长线交易，但这次对台积电（TSM）在短期内的操作，并不是出于短线考虑，所以值得记录一下。&lt;/
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
      <category term="美股" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/%E7%BE%8E%E8%82%A1/"/>
    
    
      <category term="台积电" scheme="https://www.oldcai.com/tags/%E5%8F%B0%E7%A7%AF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>一笔美元转账记录，手续费、额度、耗时</title>
    <link href="https://www.oldcai.com/investing/dollor-transfer/"/>
    <id>https://www.oldcai.com/investing/dollor-transfer/</id>
    <published>2020-09-01T01:48:59.000Z</published>
    <updated>2020-11-23T13:05:17.467Z</updated>
    
    <content type="html"><![CDATA[<p>外汇管制越来越严了。老蔡今天汇款的时候，碰到上次汇款时还没有出现过的单日额度限制，所以想记录一下。</p><p>除了换汇额度一年50000美金外，这次被银行告知单日汇款额度也被限制在人民币50000以下，不知道是不是只是银行单方面的限制。于是，汇了7200美金（折算人民币约50000）。</p><p>由于办理的光大银行出国加卡，免了电报费，所以发汇行只收了千分之一手续费，约50人民币。</p><p>汇出时间是早上9点，实际到账时间是上午10点。</p><p>中转行手续费46美元，加上香港招商银行收款手续费4美元，总共50美元。</p><p>总结一下，此笔交易手续费约0.8%。但如果转账金额更小、存在电报费的情况下可能更高，会超过1%，有其他更低费率的途径可以考虑其他途径转账。</p><p>后记：第二天收到电话，说让我改购汇用途。说总行收紧政策了，因私旅游得有机票或者酒店预订记录，有签证都不行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外汇管制越来越严了。老蔡今天汇款的时候，碰到上次汇款时还没有出现过的单日额度限制，所以想记录一下。&lt;/p&gt;
&lt;p&gt;除了换汇额度一年50000美金外，这次被银行告知单日汇款额度也被限制在人民币50000以下，不知道是不是只是银行单方面的限制。于是，汇了7200美金（折算人民币
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="转账" scheme="https://www.oldcai.com/tags/%E8%BD%AC%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>同一GitHub账号GitHub Pages绑定多个域名操作步骤</title>
    <link href="https://www.oldcai.com/hexo/github-pages/"/>
    <id>https://www.oldcai.com/hexo/github-pages/</id>
    <published>2020-08-26T10:48:00.000Z</published>
    <updated>2020-08-26T10:49:03.771Z</updated>
    
    <content type="html"><![CDATA[<p>国内的互联网偏向保守，像GitHub这么慷慨的举动确实不多，以至于老蔡刚开始也以为GitHub只能绑定一个域名，建一个网站。</p><p>但是，实际上GitHub Pages是支持绑定多个域名的，不过在他们的服务条款中禁止滥用，也就是说只要不是容易引发争议、违反美国法律的内容，应该都是没有问题的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>长话短说，建立多个网站其实就是建立多个repository，并打开网站功能</p><p>短话长说，分为2步</p><p>注：图片使用imgur存放，看不到请搬梯子</p><p>下面是小白操作步骤，详细到哭</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li>本地装好git命令</li><li>有一个可以登陆的GitHub账号</li></ol><h3 id="第一步，建立repo"><a href="#第一步，建立repo" class="headerlink" title="第一步，建立repo"></a>第一步，建立repo</h3><h4 id="1-1-新建"><a href="#1-1-新建" class="headerlink" title="1.1 新建"></a>1.1 新建</h4><p><img src="https://i.imgur.com/EGRwXZB.jpg" alt="2020-08-26 at 3.49 pm"><br>右上角，点New repository</p><h4 id="1-2-给项目取名"><a href="#1-2-给项目取名" class="headerlink" title="1.2 给项目取名"></a>1.2 给项目取名</h4><p><img src="https://i.imgur.com/pwt8cXC.jpg" alt="2020-08-26 at 5.13 pm"></p><p>因为每个项目名需要保证唯一性，而担心创建的网站太多，名字弄混，老蔡就干脆把repository name写成想绑定的网站域名了。</p><p>这一步不影响最终的域名绑定，只是GitHub代码仓库的地址。</p><p>填好后点最下面的Create repository，创建代码仓库。<br>此时会自动跳转到下一个GitHub页面，先不要任何操作（不要刷新、关闭网页）<br>打开控制台，继续下面的操作</p><h3 id="第二步，创建本地网页目录"><a href="#第二步，创建本地网页目录" class="headerlink" title="第二步，创建本地网页目录"></a>第二步，创建本地网页目录</h3><p>在控制台中，cd到准备用作本地网页目录的路径。</p><h4 id="2-1-创建域名解析配置文件"><a href="#2-1-创建域名解析配置文件" class="headerlink" title="2.1 创建域名解析配置文件"></a>2.1 创建域名解析配置文件</h4> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"githubpages.maintainless.com"</span> <span class="meta">&gt;&gt; </span>CNAME</span><br></pre></td></tr></table></figure><p> 如果你用的是其他域名，要记得改成自己的。</p><h4 id="2-2-创建git项目"><a href="#2-2-创建git项目" class="headerlink" title="2.2 创建git项目"></a>2.2 创建git项目</h4><p>复制下面的命令，在命令行中运行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"Hello world"</span> &gt;&gt; index.html</span><br><span class="line">git init</span><br><span class="line">git add index.html</span><br><span class="line">git add index.html</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure><h4 id="2-3-关联刚才创建的GitHub-repo"><a href="#2-3-关联刚才创建的GitHub-repo" class="headerlink" title="2.3 关联刚才创建的GitHub repo"></a>2.3 关联刚才创建的GitHub repo</h4><p>从刚才的GitHub页面中，复制下面的命令<br><img src="https://i.imgur.com/JedJClJ.jpg" alt="2020-08-26 at 5.22 pm"></p><p>在刚才的命令行中运行</p><h3 id="第三步，打开GitHub网页功能"><a href="#第三步，打开GitHub网页功能" class="headerlink" title="第三步，打开GitHub网页功能"></a>第三步，打开GitHub网页功能</h3><p>没有打开GitHub网页功能之前，GitHub是不会自动关联网页到域名的，这需要注意。</p><p>刷新刚才复制命令的网页，如果内容已经变了，就说明以上步骤是成功的。</p><h4 id="3-1-进入设置"><a href="#3-1-进入设置" class="headerlink" title="3.1 进入设置"></a>3.1 进入设置</h4><p><img src="https://i.imgur.com/jHAEviD.jpg" alt="2020-08-26 at 6.23 pm"></p><p>然后点击Settings，进行设置</p><h4 id="3-2-选择分支"><a href="#3-2-选择分支" class="headerlink" title="3.2 选择分支"></a>3.2 选择分支</h4><p><img src="https://i.imgur.com/1VFWDBl.jpg" alt="2020-08-26 at 6.21 pm"></p><p>选择分支后点Save<br><img src="https://i.imgur.com/ARW5pQR.jpg" alt="2020-08-26 at 6.28 pm"></p><p>就打开了GitHub网页功能</p><p><img src="https://i.imgur.com/CdS892U.jpg" alt="2020-08-26 at 6.37 pm"></p><p>记住这个地址，下面解析需要用到。如果GitHub改版，可以尝试 {<strong>GitHub用户名</strong>}.github.io</p><h3 id="第四步，解析域名"><a href="#第四步，解析域名" class="headerlink" title="第四步，解析域名"></a>第四步，解析域名</h3><p>通常来说，解析域名只用在dns服务器中解析即可。</p><p>但是如果需要加速/防墙，建议使用CloudFlare。</p><p><img src="https://i.imgur.com/LlksDfq.jpg" alt="2020-08-26 at 6.40 pm"></p><p><img src="https://i.imgur.com/ZFdsCL1.jpg" alt="2020-08-26 at 6.40 pm"></p><p>在域名解析中，用CNAME解析方式，解析到刚才的记住的地址中的域名部分即可</p><h3 id="第五步，打开网页查看"><a href="#第五步，打开网页查看" class="headerlink" title="第五步，打开网页查看"></a>第五步，打开网页查看</h3><p>打开<a href="https://githubpages.maintainless.com/" target="_blank" rel="noopener">测试地址</a>查看</p><p><img src="https://i.imgur.com/fJSwZKM.jpg" alt="2020-08-26 at 6.42 pm"></p><p>如果没有马上生效，等5分钟再看看。</p><p>以上就是小白版本GitHub Pages创建教程，同一个账号支持多个域名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;国内的互联网偏向保守，像GitHub这么慷慨的举动确实不多，以至于老蔡刚开始也以为GitHub只能绑定一个域名，建一个网站。&lt;/p&gt;
&lt;p&gt;但是，实际上GitHub Pages是支持绑定多个域名的，不过在他们的服务条款中禁止滥用，也就是说只要不是容易引发争议、违反美国法律的
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="GitHub" scheme="https://www.oldcai.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>经济下行，为何股价还屡创新高？</title>
    <link href="https://www.oldcai.com/investing/inflation/"/>
    <id>https://www.oldcai.com/investing/inflation/</id>
    <published>2020-08-25T17:30:58.000Z</published>
    <updated>2020-08-30T21:57:54.353Z</updated>
    
    <content type="html"><![CDATA[<p>今天思考了下现阶段消费类股票涨上天的合理性。</p><p>以前的经济周期中衰退的时候，是资产贬值，现金增值的。</p><p>现在全球都是用“看得见的手”来操控，经济下行就印钞，所以过往很多经验不一定行得通了。</p><p>以前经济下行的时候现金为王，现在现金都不再有避险性，大家都去买黄金。</p><p>目前体现在股市上的情况是，经济下行，政府就通过增发货币做宏观调控，推高股市整体市盈率。</p><p>理想状况是以后货币的购买力下降后，企业赚更多的面额的货币，把PE给挣下去。</p><p>感觉如果能再看远一步，就能从中赚到钱，可惜我还看不见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天思考了下现阶段消费类股票涨上天的合理性。&lt;/p&gt;
&lt;p&gt;以前的经济周期中衰退的时候，是资产贬值，现金增值的。&lt;/p&gt;
&lt;p&gt;现在全球都是用“看得见的手”来操控，经济下行就印钞，所以过往很多经验不一定行得通了。&lt;/p&gt;
&lt;p&gt;以前经济下行的时候现金为王，现在现金都不再有避
      
    
    </summary>
    
      <category term="投资" scheme="https://www.oldcai.com/categories/%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="泡沫" scheme="https://www.oldcai.com/tags/%E6%B3%A1%E6%B2%AB/"/>
    
      <category term="通胀" scheme="https://www.oldcai.com/tags/%E9%80%9A%E8%83%80/"/>
    
  </entry>
  
  <entry>
    <title>创建只有 10MB 左右大小的docker镜像 - rust之actix-web - rust教程04</title>
    <link href="https://www.oldcai.com/rust/small-docker-image/"/>
    <id>https://www.oldcai.com/rust/small-docker-image/</id>
    <published>2020-07-15T17:30:58.000Z</published>
    <updated>2020-08-29T11:15:19.532Z</updated>
    
    <content type="html"><![CDATA[<p>该文章为<a href="https://www.oldcai.com/rust/web-server-response-ip/">构建 actix web</a>服务的后续，旨在利用 Dockerfile 给 rust 构建的 web 程序制作一个最小镜像。</p><p>利用 Dockerfile 制作 rust 程序的镜像，难点在于在一个 docker 容器中交叉编译、构建，生成的docker镜像又要打包到另一个容器。</p><p>好在 docker 已经提供了相关的支持，完成后的 Dockerfile 如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> oldcai/rust-musl-builder:latest as build</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /home/rust/src</span></span><br><span class="line"><span class="bash">WORKDIR /home/rust/src</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#RUN apk add --no-cache ca-certificates gcc mingw-w64-gcc libc-dev musl-dev</span></span></span><br><span class="line"><span class="bash"><span class="comment">#RUN rustup target add x86_64-unknown-linux-musl</span></span></span><br><span class="line"><span class="bash">RUN cargo build --release</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">FROM alpine:latest</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /web/</span></span><br><span class="line"><span class="bash">COPY --from=build /home/rust/src/target/x86_64-unknown-linux-musl/release/httpapi /web/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"./httpapi"</span>, <span class="string">"0.0.0.0:80"</span>]</span></span><br></pre></td></tr></table></figure><p>注解的部分是如果不用老蔡提供的这个镜像，可能需要装的一些库。</p><p>运行程序的基础镜像选择的最新版本的 alpine，镜像本身只有 5.57MB 大小，很适合golang、rust编译的、没什么依赖项的程序运行。</p><p>打包完毕后，总大小才13.5MB</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文章为&lt;a href=&quot;https://www.oldcai.com/rust/web-server-response-ip/&quot;&gt;构建 actix web&lt;/a&gt;服务的后续，旨在利用 Dockerfile 给 rust 构建的 web 程序制作一个最小镜像。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="rust" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/rust/"/>
    
    
      <category term="docker" scheme="https://www.oldcai.com/tags/docker/"/>
    
      <category term="actix" scheme="https://www.oldcai.com/tags/actix/"/>
    
      <category term="rancher" scheme="https://www.oldcai.com/tags/rancher/"/>
    
      <category term="server" scheme="https://www.oldcai.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>2个命令清理至少10GB CentOS磁盘</title>
    <link href="https://www.oldcai.com/linux/free-centos-disk-cn/"/>
    <id>https://www.oldcai.com/linux/free-centos-disk-cn/</id>
    <published>2020-07-12T01:07:45.000Z</published>
    <updated>2020-08-29T11:15:19.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我有一个VPS已经运行了将近两年，其磁盘使用率已超过90％。</p><p>因为没有什么业务在上面，所以也不想增加预算。</p><p>于是，我开始研究占用磁盘的目录，并最终找出了是谁占用了这么多磁盘。</p><p>不过好在清理它们没啥风险，并且也不费劲。</p><p>下面是清空磁盘的命令:</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="第一个命令"><a href="#第一个命令" class="headerlink" title="第一个命令"></a>第一个命令</h3><p>由于长时间运行，系统可能具有数十GB的日志，让日记服务的大小保持在特定大小是个好主意。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl <span class="attribute">--vacuum-size</span>=1G</span><br></pre></td></tr></table></figure><h3 id="第二个命令"><a href="#第二个命令" class="headerlink" title="第二个命令"></a>第二个命令</h3><p>清理yum缓存，这个在我这边也超过10GB。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br></pre></td></tr></table></figure><p>运行这些命令后，我的VPS系统释放了大约12GB的空间，然后又重新满血复活。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;我有一个VPS已经运行了将近两年，其磁盘使用率已超过90％。&lt;/p&gt;
&lt;p&gt;因为没有什么业务在上面，所以也不想增加预算。&lt;/p&gt;
&lt;p&gt;于是
      
    
    </summary>
    
      <category term="Linux" scheme="https://www.oldcai.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://www.oldcai.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Free CentOS Disk for 10G in 2 Commands</title>
    <link href="https://www.oldcai.com/linux/free-centos-disk/"/>
    <id>https://www.oldcai.com/linux/free-centos-disk/</id>
    <published>2020-07-12T00:54:45.000Z</published>
    <updated>2020-11-23T13:03:41.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>I have a personal VPS had been running for almost two years, and its disk usage is getting to 90%.</p><p>Increase the budget is not necessary because there isn’t any serious business running on it.</p><p>Then I started to investigate the disk-consuming directories and finally found out who was responsible for high disk usage, and .</p><p>The good thing is, there is no risk or any effort to exert for cleaning them.</p><p>Here are the commands to free those disk:</p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">journalctl <span class="comment">--vacuum-size=1G</span></span><br><span class="line">yum clean <span class="keyword">all</span></span><br></pre></td></tr></table></figure><h2 id="A-Little-Explanation"><a href="#A-Little-Explanation" class="headerlink" title="A Little Explanation"></a>A Little Explanation</h2><p>For the first command, because a long run system could have tens of GBs of log archives, making journal service keep its size below a specific size is always a good idea.</p><p>The second one is cleaning the yum cache, which is also above 10GBs on my side.</p><p>After running those commands, my VPS system had freed about 12GBs and back to bouncing again.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;I have a personal VPS had been
      
    
    </summary>
    
      <category term="Linux" scheme="https://www.oldcai.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://www.oldcai.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>响应IP的HTTP Server - rust之actix-web - rust教程03</title>
    <link href="https://www.oldcai.com/rust/web-server-response-ip/"/>
    <id>https://www.oldcai.com/rust/web-server-response-ip/</id>
    <published>2020-07-11T16:52:00.000Z</published>
    <updated>2020-07-11T17:18:43.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">new</span> <span class="keyword">return</span>-ip</span><br></pre></td></tr></table></figure><h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h2><blockquote><p>Cargo.toml</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">actix-web</span> = <span class="string">"0.7"</span></span><br><span class="line"><span class="attr">clap</span> = <span class="string">"2.33.1"</span></span><br></pre></td></tr></table></figure><blockquote><p>src/main.rs</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> actix_web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> actix_web::&#123;App, HttpRequest, Responder, server&#125;;</span><br><span class="line"><span class="keyword">use</span> clap::Arg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">index</span></span>(_req: &amp;HttpRequest) -&gt; <span class="keyword">impl</span> Responder &#123;</span><br><span class="line">    <span class="keyword">let</span> addr = _req.peer_addr().unwrap();</span><br><span class="line">    <span class="keyword">let</span> ip = addr.ip().to_string();</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">"&#123;&#125;\n"</span>, ip)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> matches = clap::App::new(<span class="string">"HTTP Proxy"</span>)</span><br><span class="line">        .arg(</span><br><span class="line">            Arg::with_name(<span class="string">"listen_addr"</span>)</span><br><span class="line">                .takes_value(<span class="literal">true</span>)</span><br><span class="line">                .value_name(<span class="string">"LISTEN ADDR"</span>)</span><br><span class="line">                .index(<span class="number">1</span>)</span><br><span class="line">                .required(<span class="literal">true</span>),</span><br><span class="line">        )</span><br><span class="line">        .get_matches();</span><br><span class="line">    <span class="keyword">let</span> listen_addr = matches.value_of(<span class="string">"listen_addr"</span>).unwrap();</span><br><span class="line">    server::new(|| App::new().resource(<span class="string">"/"</span>, |r| r.f(index)))</span><br><span class="line">        .bind(listen_addr)</span><br><span class="line">        .unwrap()</span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">run</span><span class="bash"> :::8000</span></span><br></pre></td></tr></table></figure><h3 id="如果只需要ipv4，则运行"><a href="#如果只需要ipv4，则运行" class="headerlink" title="如果只需要ipv4，则运行"></a>如果只需要ipv4，则运行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cargo</span> <span class="selector-tag">run</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:8000</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:<span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 或者指定 IPV6 地址请求</span></span><br><span class="line">curl -g -<span class="number">6</span> 'http://[::1]:<span class="number">8000</span>/'</span><br></pre></td></tr></table></figure><p>或者直接打开 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a></p><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><blockquote><p>IPV4返回： 127.0.0.1<br>IPV6返回： ::1</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>用actix实现出一个http服务端程序</p><p>用到模块：</p><ol><li>actix-web, 提供http</li><li>clap, 解析命令行参数</li></ol><p>实现功能：</p><ol><li>获取传入的绑定ip地址</li><li>绑定到地址后提供http服务</li><li>返回请求端的ip地址</li></ol><h2 id="benchmark测试"><a href="#benchmark测试" class="headerlink" title="benchmark测试"></a>benchmark测试</h2><p>打开release后，actix-web benchmark测试得16.14k</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Running <span class="number">30</span>s test @ <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/</span><br><span class="line">  <span class="number">12</span> threads <span class="keyword">and</span> <span class="number">400</span> connections</span><br><span class="line">    Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     <span class="number">1.11</span>ms  <span class="number">201.40</span>us  <span class="number">15.62</span>ms   <span class="number">97.33</span>%</span><br><span class="line">    Req/Sec    <span class="number">16.14</span>k     <span class="number">4.92</span>k   <span class="number">24.15</span>k    <span class="number">66.61</span>%</span><br><span class="line">  <span class="number">3044704</span> requests <span class="keyword">in</span> <span class="number">15.80</span>s, <span class="number">389.09</span>MB <span class="built_in">read</span></span><br><span class="line">  Socket errors: connect <span class="number">155</span>, <span class="built_in">read</span> <span class="number">122</span>, <span class="built_in">write</span> <span class="number">0</span>, timeout <span class="number">0</span></span><br><span class="line">Requests/<span class="built_in">sec</span>: <span class="number">192666.29</span></span><br><span class="line">Transfer/<span class="built_in">sec</span>:     <span class="number">24.62</span>MB</span><br></pre></td></tr></table></figure><p>debug模式时，actix-web QPS为6.21k</p><p>奇怪得是IPV6或者IPV4的选择也会影响QPS，</p><p>当用IPV6进行访问时，</p><p>release版本也会掉到10.86k左右，debug版本反而没啥变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="rust" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/rust/"/>
    
    
      <category term="actix" scheme="https://www.oldcai.com/tags/actix/"/>
    
      <category term="server" scheme="https://www.oldcai.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>传回TCP传入字符的Echo Server - rust之tokio - rust教程02</title>
    <link href="https://www.oldcai.com/rust/echo-server/"/>
    <id>https://www.oldcai.com/rust/echo-server/</id>
    <published>2020-07-09T23:24:02.000Z</published>
    <updated>2020-07-11T17:18:54.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">new</span> <span class="comment">--bin echo-server</span></span><br></pre></td></tr></table></figure><h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h2><blockquote><p>Cargo.toml</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">"0.2"</span>, features = [<span class="string">"full"</span>] &#125;</span><br><span class="line"><span class="attr">futures</span> = <span class="string">"0.3"</span></span><br></pre></td></tr></table></figure><blockquote><p>src/main.rs</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::net::TcpListener;</span><br><span class="line"><span class="keyword">use</span> tokio::prelude::*;</span><br><span class="line"><span class="keyword">use</span> futures::stream::StreamExt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line">async <span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="string">"127.0.0.1:6142"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> listener = TcpListener::bind(addr).await.unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here we convert the `TcpListener` to a stream of incoming connections</span></span><br><span class="line">    <span class="comment">// with the `incoming` method.</span></span><br><span class="line">    <span class="keyword">let</span> server = &#123;</span><br><span class="line">        async <span class="keyword">move</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> incoming = listener.incoming();</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(conn) = incoming.next().await &#123;</span><br><span class="line">                <span class="keyword">match</span> conn &#123;</span><br><span class="line">                    <span class="literal">Err</span>(e) =&gt; eprintln!(<span class="string">"accept failed = &#123;:?&#125;"</span>, e),</span><br><span class="line">                    <span class="literal">Ok</span>(<span class="keyword">mut</span> sock) =&gt; &#123;</span><br><span class="line">                        <span class="comment">// Spawn the future that echos the data and returns how</span></span><br><span class="line">                        <span class="comment">// many bytes were copied as a concurrent task.</span></span><br><span class="line">                        tokio::spawn(async <span class="keyword">move</span> &#123;</span><br><span class="line">                            <span class="comment">// Split up the reading and writing parts of the</span></span><br><span class="line">                            <span class="comment">// socket.</span></span><br><span class="line">                            <span class="keyword">let</span> (<span class="keyword">mut</span> reader, <span class="keyword">mut</span> writer) = sock.split();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">match</span> tokio::io::copy(&amp;<span class="keyword">mut</span> reader, &amp;<span class="keyword">mut</span> writer).await &#123;</span><br><span class="line">                                <span class="literal">Ok</span>(amt) =&gt; &#123;</span><br><span class="line">                                    <span class="built_in">println!</span>(<span class="string">"wrote &#123;&#125; bytes"</span>, amt);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="literal">Err</span>(err) =&gt; &#123;</span><br><span class="line">                                    eprintln!(<span class="string">"IO error &#123;:?&#125;"</span>, err);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Server running on localhost:6142"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the server and block this async fn until `server` spins down.</span></span><br><span class="line">    server.await;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h3 id="如果出错，则运行"><a href="#如果出错，则运行" class="headerlink" title="如果出错，则运行"></a>如果出错，则运行</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUST_BACKTRACE=full cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>可以查看到出错的堆栈</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h4><p>随便输入数据后，回车，会看到传回数据</p><blockquote><p>Input: oldcai.com</p></blockquote><blockquote><p>Output: oldcai.com</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用tokio实现出一个服务端程序</p><p>实现功能：</p><ol><li>监听本地6142端口</li><li>收到数据流后，传回同样数据</li></ol><p><code>let (mut reader, mut writer) = sock.split();</code>这句有些意思</p><p>把socket分成写和读两个对象，让处理更加简单了。</p><p><code>tokio::spawn</code>这句是能够并发的关键，没有这句就只能一次处理一个连接</p><p>而加上这句，其实代码逻辑还是和同步编程一样</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="rust" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/rust/"/>
    
    
      <category term="tokio" scheme="https://www.oldcai.com/tags/tokio/"/>
    
  </entry>
  
  <entry>
    <title>Hello World - rust之tokio- rust教程01</title>
    <link href="https://www.oldcai.com/rust/tokio-hello-world/"/>
    <id>https://www.oldcai.com/rust/tokio-hello-world/</id>
    <published>2020-07-09T22:57:53.000Z</published>
    <updated>2020-07-11T17:18:33.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">new</span> <span class="type">hello</span>-tokio</span><br></pre></td></tr></table></figure><h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h2><blockquote><p>Cargo.toml</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">"0.2"</span>, features = [<span class="string">"full"</span>] &#125;</span><br></pre></td></tr></table></figure><blockquote><p>src/main.rs</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::net::TcpStream;</span><br><span class="line"><span class="keyword">use</span> tokio::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line">async <span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> stream = TcpStream::connect(<span class="string">"127.0.0.1:6142"</span>).await.unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"created stream"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = stream.write(<span class="string">b"hello world\n"</span>).await;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"wrote to stream; success=&#123;:?&#125;"</span>, result.is_ok());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6142</span></span><br></pre></td></tr></table></figure><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h3 id="如果出错，则运行"><a href="#如果出错，则运行" class="headerlink" title="如果出错，则运行"></a>如果出错，则运行</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUST_BACKTRACE=full cargo <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>可以查看到出错的堆栈</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用tokio实现出一个客户端程序<br>实现功能：</p><ol><li>连接到本地6142端口</li><li>发送字符串<code>hello world\n</code></li><li>检测是否发送成功并打印</li></ol><p>可能错误：<br>本地端口监听失败或还未监听，会出现错误：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread 'main' panicked <span class="keyword">at</span> 'called `Result::unwrap()` <span class="keyword">on</span> an `Err` value: Os &#123; code: <span class="number">61</span>, kind: ConnectionRefused, message: <span class="string">"Connection refused"</span> &#125;', src/main.rs:<span class="number">6</span>:<span class="number">22</span></span><br><span class="line">note: <span class="built_in">run</span> <span class="keyword">with</span> `RUST_BACKTRACE=<span class="number">1</span>` environment variable <span class="keyword">to</span> display a backtrace</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="教程" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="rust" scheme="https://www.oldcai.com/categories/%E6%95%99%E7%A8%8B/rust/"/>
    
    
      <category term="tokio" scheme="https://www.oldcai.com/tags/tokio/"/>
    
  </entry>
  
</feed>
